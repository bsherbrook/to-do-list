(()=>{"use strict";var e={192:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Cabin+Sketch&family=Dekko&family=Quicksand&family=Roboto:wght@300&family=Sniglet&family=Walter+Turncoat&display=swap);"]),a.push([e.id,'body{box-sizing:border-box;display:flex;flex-direction:column;align-items:center;justify-content:center;margin:0;padding:0;background-color:#00213a}body button:hover{cursor:pointer}body #card{display:grid;grid-template-rows:1fr 9fr;grid-template-columns:2fr 4fr;margin-top:100px;background-color:#f0f8ff;height:700px;width:1200px;border-radius:10px}body #card #header{grid-column:1/3;box-sizing:border-box;display:flex;align-items:center;border-bottom:1px solid #2b41cf;padding:15px 30px 10px 30px;justify-content:flex-end;background-color:#46a9ff;font-size:35px;border-top-left-radius:10px;border-top-right-radius:10px;font-family:"Cabin Sketch",cursive}body #card #header button{border-radius:5px;height:25px;font-weight:900;font-size:15px;font-family:"Quicksand",sans-serif;color:#fff;border:1px solid #fff;background-color:#6bb8fb}body #card #header button:hover{background-color:#5baff9}body #card #sidebar{font-family:"Walter Turncoat",cursive;font-size:20px;box-sizing:border-box;padding:10px 10px 10px 20px;display:flex;flex-direction:column;grid-row:2/3;margin:0;width:235px;height:100%;background-color:#f7fdd9;border-bottom-left-radius:10px}body #card #sidebar #projectList,body #card #sidebar #noteList{list-style:none}body #card #sidebar #projectList li,body #card #sidebar #noteList li{margin-bottom:10px}body #card #sidebar #projectList #addProjectButton,body #card #sidebar #noteList #addProjectButton{display:flex;align-items:center;height:25px;width:25px;font-size:20px;font-family:"Walter Turncoat",cursive;font-weight:700;color:#3f270c;border-radius:5px;border:#aaa753 2px;border-style:dashed;background-color:#fffbed}body #card #sidebar #projectList #newFolderLI,body #card #sidebar #noteList #newFolderLI{margin:10px 0 10px -50px}body #card #sidebar #projectList #newFolderLI input,body #card #sidebar #noteList #newFolderLI input{border-radius:10px;border:1px solid #fff;height:20px;font-family:Roboto,sans-serif;font-size:15px}body #card #sidebar #projectList #newFolderLI #newFolderButtons,body #card #sidebar #noteList #newFolderLI #newFolderButtons{margin-left:-20px}body #card #sidebar #projectList #newFolderLI #newFolderButtons button,body #card #sidebar #noteList #newFolderLI #newFolderButtons button{border-radius:10px;border-color:#37c2fd;font-family:"Sniglet",cursive}body #card #sidebar .projectFolder,body #card #sidebar .noteFolder{font-size:20px;display:inline-block}body #card #sidebar .projectFolder:hover,body #card #sidebar .noteFolder:hover{cursor:pointer}body #card #sidebar #newFolderBox{display:flex;flex-direction:column;justify-content:center;align-items:center}body #card #sidebar #newFolderBox #newFolderButtons{display:flex;column-gap:15px;margin:5px}body #card #content-card{box-sizing:border-box;position:relative;background-color:#000f33;display:flex;flex-direction:column;grid-column:2/3;padding:1px 0 0 1px;border-bottom-right-radius:10px}body #card #content-card #content-card-buttons{display:flex;justify-content:flex-end;padding:5px 30px 5px 0;font-size:20px;align-items:center;column-gap:30px;border-bottom-right-radius:10px;background-color:#28c9f9;border-top:1px solid #000;font-family:"Cabin Sketch",cursive}body #card #content-card #content-card-buttons button{font-size:20px;border-radius:15px;border:1px solid blue;font-family:"Cabin Sketch",cursive}body #card #content{background-color:#cff6fc;box-sizing:border-box;padding:5px;width:100%;height:100%;position:relative}body #card #content #currentFolderDisplay{display:flex;justify-content:space-between;column-gap:10px;padding:12px;font-family:"Cabin Sketch",cursive;font-size:25px;border-bottom:1px dashed #000}body #card #content #currentFolderDisplay #folderDestroyer,body #card #content #currentFolderDisplay #folderEditor{margin-right:10px;border-radius:10px;border:1px solid #000;font-family:"Cabin Sketch",cursive;padding:4px}body #card #content #contentBody{display:block;grid-template-columns:1fr 1fr 1fr 1fr;overflow-y:auto;width:1000px;height:580px;row-gap:5px}body #card #content .toDoNote{border:1px solid #000;background-color:#ff0;display:flex;flex-direction:column;align-items:center;overflow-y:auto;width:200px;height:200px;padding:5px;font-family:"Walter Turncoat",cursive;resize:both}body #card #content .toDoNote .removeNoteButton{border-radius:10px;border:1px solid #000;position:absolute;right:1px;top:1px;height:15px;font-size:10px;text-align:center;overflow:hidden;font-family:"Cabin Sketch",cursive}body #card #content .toDoNote .removeNoteButton:hover{background-color:#c5c5c5}body #card #content .toDoProj{display:flex;background-color:#ddf9fb;justify-content:space-between;padding:10px;font-size:20px;align-items:center;border:1px solid #000;font-family:"Quicksand",sans-serif}body #card #content .toDoProj #leftsideProj{display:flex;column-gap:10px}body #card #content .toDoProj #rightsideProj{display:flex;column-gap:10px}body #card #content .toDoProj #rightsideProj button{border-radius:5px;border:1px solid #000;background-color:#e2f8fd}body #card #content #editFolderForm{opacity:0%;position:absolute;left:350px;top:170px;display:flex;flex-direction:column;padding:10px;background-color:#6bb8fb;border-radius:10px;justify-content:center;align-items:center;z-index:-1;row-gap:8px;font-family:"Cabin Sketch",cursive}body #card #content #editFolderForm input{border-radius:10px}body #card #content #editFolderForm button{border:1px solid #000;border-radius:10px;margin-left:8px;font-family:"Walter Turncoat",cursive}body #card #content #formBox{opacity:0%;position:absolute;left:200px;top:170px;display:flex;flex-direction:column;padding:10px;background-color:#6bb8fb;border-radius:10px;justify-content:center;align-items:center;z-index:-1}body #card #content #formBox #formBottom{justify-content:center}body #card #content #formBox #formBottom #priority{margin-right:20px}body #card #content #formBox #modalForm{display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:-1;margin:0 5px 5px 5px;font-size:20px;font-family:"Dekko",cursive}body #card #content #formBox #modalForm input,body #card #content #formBox #modalForm #projectDescription{border-radius:10px;border-style:none}body #card #content #formBox #buttonFormBox{display:flex;column-gap:25px}body #card #content #formBox #buttonFormBox button,body #card #content #formBox #buttonFormBox input{border-radius:5px;border-style:none;height:20px;min-width:25px;text-align:center;font-family:"Dekko",cursive}body #card #content #formBox #buttonFormBox button:hover,body #card #content #formBox #buttonFormBox input:hover{cursor:pointer;background-color:#d8edff;border:blue 1px solid}body #card #content #noteBox{opacity:0%;position:absolute;left:200px;top:170px;display:flex;flex-direction:column;padding:10px;background-color:#6bb8fb;border-radius:10px;justify-content:center;align-items:center;z-index:-1}body #card #content #noteBox #noteForm{display:flex;flex-direction:column;justify-content:center;align-items:center;z-index:-1;margin:0 5px 5px 5px;font-size:20px;font-family:"Dekko",cursive}body #card #content #noteBox #noteForm input,body #card #content #noteBox #noteForm #noteDescription{border-radius:10px;border-style:none}body #card #content #noteBox #buttonFormBox{display:flex;column-gap:25px}body #card #content #noteBox #buttonFormBox button,body #card #content #noteBox #buttonFormBox input{border-radius:5px;border-style:none;height:20px;min-width:25px;text-align:center;font-family:"Dekko",cursive}body #card #content #noteBox #buttonFormBox button:hover,body #card #content #noteBox #buttonFormBox input:hover{cursor:pointer;background-color:#d8edff;border:blue 1px solid}body #card #content #modalDetails{opacity:0%;position:absolute;width:300px;left:270px;top:170px;display:flex;flex-direction:column;font-size:20px;padding:15px;border-radius:10px;border:1px solid #000;font-family:"Quicksand",sans-serif;background-color:#79c0ff;justify-content:center;align-items:center;z-index:-1}body #card #content #modalDetails #editModalDetails,body #card #content #modalDetails #cancelModalDetails{margin-right:10px;border:1px solid #000;border-radius:5px;font-size:20px;font-family:"Sniglet",cursive}body #card #content #modalDetails div{font-size:25px;font-family:"Sniglet",cursive}body #card #content #modalDetails #modalTitleData{font-family:"Cabin Sketch",cursive;font-size:40px}body #card #content #modalDetails #modalFolderData,body #card #content #modalDetails #modalPriorityData,body #card #content #modalDetails #modalDateData,body #card #content #modalDetails #modalDetailsData{margin-left:10px;font-size:20px}body #footer{background-color:#f0f8ff;border-radius:15px;bottom:0px;opacity:65%;color:#6bb8fb;padding:5px 20px 5px 20px;text-align:center;position:fixed}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["@import url(\"https://fonts.googleapis.com/css2?family=Cabin+Sketch&family=Dekko&family=Quicksand&family=Roboto:wght@300&family=Sniglet&family=Walter+Turncoat&display=swap\");\nbody {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin: 0;\n  padding: 0;\n  background-color: rgb(0, 33, 58);\n\n  button:hover {\n    cursor: pointer;\n  }\n  #card {\n    display: grid;\n    grid-template-rows: 1fr 9fr;\n    grid-template-columns: 2fr 4fr;\n    margin-top: 100px;\n    background-color: aliceblue;\n    height: 700px;\n    width: 1200px;\n    border-radius: 10px;\n    #header {\n      grid-column: 1/3;\n      box-sizing: border-box;\n      display: flex;\n      align-items: center;\n      border-bottom: 1px solid rgb(43, 65, 207);\n      padding: 15px 30px 10px 30px;\n      justify-content: flex-end;\n      background-color: rgb(70, 169, 255);\n      font-size: 35px;\n      border-top-left-radius: 10px;\n      border-top-right-radius: 10px;\n      font-family: \"Cabin Sketch\", cursive;\n      //font-family: 'Quicksand', sans-serif;\n      //font-family: 'Sniglet', cursive;\n      //font-family: 'Roboto', sans-serif;\n      //font-family: 'Walter Turncoat', cursive;\n      //font-family: 'Dekko', cursive;\n      button {\n        border-radius: 5px;\n        height: 25px;\n        font-weight: 900;\n        font-size: 15px;\n        font-family: \"Quicksand\", sans-serif;\n        color: white;\n        border: 1px solid white;\n        background-color: rgb(107, 184, 251);\n        &:hover {\n          background-color: rgb(91, 175, 249);\n        }\n      }\n    }\n    #sidebar {\n      font-family: \"Walter Turncoat\", cursive;\n      font-size: 20px;\n      box-sizing: border-box;\n      padding: 10px 10px 10px 20px;\n      display: flex;\n      flex-direction: column;\n      grid-row: 2/3;\n      margin: 0;\n      width: 235px;\n      height: 100%;\n      background-color: rgb(247, 253, 217);\n      border-bottom-left-radius: 10px;\n      #projectList,\n      #noteList {\n        list-style: none;\n        li {\n          margin-bottom: 10px;\n        }\n        #addProjectButton {\n          display: flex;\n          align-items: center;\n          height: 25px;\n          width: 25px;\n          font-size: 20px;\n          font-family: \"Walter Turncoat\", cursive;\n          font-weight: 700;\n          color: rgb(63, 39, 12);\n          border-radius: 5px;\n          border: rgb(170, 167, 83) 2px;\n          border-style: dashed;\n          background-color: rgb(255, 251, 237);\n        }\n        #newFolderLI {\n          margin: 10px 0 10px -50px;\n\n          input {\n            border-radius: 10px;\n            border: 1px solid white;\n            height: 20px;\n            font-family: Roboto, sans-serif;\n            font-size: 15px;\n          }\n          #newFolderButtons {\n            margin-left: -20px;\n            button {\n              border-radius: 10px;\n              border-color: rgb(55, 194, 253);\n              font-family: \"Sniglet\", cursive;\n            }\n          }\n        }\n      }\n      .projectFolder,\n      .noteFolder {\n        font-size: 20px;\n        display: inline-block;\n        &:hover {\n          cursor: pointer;\n        }\n      }\n      #newFolderBox {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        #newFolderButtons {\n          display: flex;\n          column-gap: 15px;\n          margin: 5px;\n        }\n      }\n    }\n    #content-card {\n      box-sizing: border-box;\n      position: relative;\n      background-color: rgb(0, 15, 51);\n      display: flex;\n      flex-direction: column;\n      grid-column: 2/3;\n      padding: 1px 0 0 1px;\n      border-bottom-right-radius: 10px;\n      #content-card-buttons {\n        display: flex;\n        justify-content: flex-end;\n        padding: 5px 30px 5px 0;\n        font-size: 20px;\n        align-items: center;\n        column-gap: 30px;\n        border-bottom-right-radius: 10px;\n        background-color: rgb(40, 201, 249);\n        border-top: 1px solid black;\n        font-family: \"Cabin Sketch\", cursive;\n        button {\n          font-size: 20px;\n          border-radius: 15px;\n          border: 1px solid blue;\n          font-family: \"Cabin Sketch\", cursive;\n        }\n      }\n    }\n    #content {\n      background-color: rgb(207, 246, 252);\n      box-sizing: border-box;\n      padding: 5px;\n      width: 100%;\n      height: 100%;\n      position: relative;\n      #currentFolderDisplay {\n        display: flex;\n        justify-content: space-between;\n        column-gap: 10px;\n        padding: 12px;\n        font-family: \"Cabin Sketch\", cursive;\n        font-size: 25px;\n        border-bottom: 1px dashed black;\n        \n        #folderDestroyer, #folderEditor{\n          margin-right: 10px;\n          border-radius: 10px;\n          border: 1px solid black;       \n          font-family: \"Cabin Sketch\", cursive;\n          padding: 4px;\n        }\n      }\n      #contentBody {\n        display: block;\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n        overflow-y: auto;\n        width: 1000px;\n        height: 580px;\n        row-gap: 5px;\n      }\n      .toDoNote {\n        border: 1px solid black;\n        background-color: yellow;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        overflow-y: auto;\n        width: 200px;\n        height: 200px;\n        padding: 5px;\n        font-family: 'Walter Turncoat', cursive;\n        resize: both;\n        .removeNoteButton{\n          border-radius: 10px;\n          border: 1px solid black;\n          position: absolute;\n          right: 1px;\n          top: 1px;\n          height: 15px;\n          font-size: 10px;\n          text-align: center;\n          overflow: hidden;\n          font-family: \"Cabin Sketch\", cursive;\n          &:hover{\n            background-color:rgb(197, 197, 197);\n          }\n        }\n      }\n      .toDoProj {\n        display: flex;\n        background-color: rgb(221, 249, 251);\n        justify-content: space-between;\n        padding: 10px;\n        font-size: 20px;\n        align-items: center;\n        border: 1px solid black;\n        font-family: \"Quicksand\", sans-serif;\n\n        #leftsideProj {\n          display: flex;\n          column-gap: 10px;\n        }\n        #rightsideProj {\n          display: flex;\n          column-gap: 10px;\n          button {\n            border-radius: 5px;\n            border: 1px solid rgb(0, 0, 0);\n            background-color: rgb(226, 248, 253);\n          }\n        }\n      }\n      #editFolderForm{\n        opacity: 0%;\n        position: absolute;\n        left: 350px;\n        top: 170px;\n        display: flex;\n        flex-direction: column;\n        padding: 10px;\n        background-color: rgb(107, 184, 251);\n        border-radius: 10px;\n        justify-content: center;\n        align-items: center;\n        z-index: -1;\n        row-gap: 8px;\n        font-family: 'Cabin Sketch', cursive;\n          input{\n            border-radius: 10px;\n          }\n        button{\n          border: 1px solid black;\n          border-radius: 10px;\n          margin-left: 8px;\n          font-family: 'Walter Turncoat', cursive;\n        }\n      }\n      #formBox {\n        opacity: 0%;\n        position: absolute;\n        left: 200px;\n        top: 170px;\n        display: flex;\n        flex-direction: column;\n        padding: 10px;\n        background-color: rgb(107, 184, 251);\n        border-radius: 10px;\n        justify-content: center;\n        align-items: center;\n        z-index: -1;\n        #formBottom {\n          justify-content: center;\n          #priority {\n            margin-right: 20px;\n          }\n        }\n\n        #modalForm {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: -1;\n          margin: 0 5px 5px 5px;\n          font-size: 20px;\n          //font-family: 'Cabin Sketch', cursive;\n          //font-family: 'Quicksand', sans-serif;\n          //font-family: 'Sniglet', cursive;\n          //font-family: 'Roboto', sans-serif;\n          //font-family: 'Walter Turncoat', cursive;\n          font-family: \"Dekko\", cursive;\n          input,\n          #projectDescription {\n            border-radius: 10px;\n            border-style: none;\n          }\n        }\n        #buttonFormBox {\n          display: flex;\n          column-gap: 25px;\n          button,\n          input {\n            border-radius: 5px;\n            border-style: none;\n            height: 20px;\n            min-width: 25px;\n            text-align: center;\n            font-family: \"Dekko\", cursive;\n            &:hover {\n              cursor: pointer;\n              background-color: rgb(216, 237, 255);\n              border: blue 1px solid;\n            }\n          }\n        }\n      }\n      #noteBox {\n        opacity: 0%;\n        position: absolute;\n        left: 200px;\n        top: 170px;\n        display: flex;\n        flex-direction: column;\n        padding: 10px;\n        background-color: rgb(107, 184, 251);\n        border-radius: 10px;\n        justify-content: center;\n        align-items: center;\n        z-index: -1;\n        #noteForm {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          z-index: -1;\n          margin: 0 5px 5px 5px;\n          font-size: 20px;\n          //font-family: 'Cabin Sketch', cursive;\n          //font-family: 'Quicksand', sans-serif;\n          //font-family: 'Sniglet', cursive;\n          //font-family: 'Roboto', sans-serif;\n          //font-family: 'Walter Turncoat', cursive;\n          font-family: \"Dekko\", cursive;\n          input,\n          #noteDescription {\n            border-radius: 10px;\n            border-style: none;\n          }\n        }\n        #buttonFormBox {\n          display: flex;\n          column-gap: 25px;\n          button,\n          input {\n            border-radius: 5px;\n            border-style: none;\n            height: 20px;\n            min-width: 25px;\n            text-align: center;\n            font-family: \"Dekko\", cursive;\n            //padding-bottom: 5px;\n            &:hover {\n              cursor: pointer;\n              background-color: rgb(216, 237, 255);\n              border: blue 1px solid;\n            }\n          }\n        }\n      }\n      #modalDetails {\n        opacity: 0%;\n        position: absolute;\n        width: 300px;\n        left: 270px;\n        top: 170px;\n        display: flex;\n        flex-direction: column;\n        font-size: 20px;\n        padding: 15px;\n        border-radius: 10px;\n        border: 1px solid black;\n        font-family: \"Quicksand\", sans-serif;\n        background-color: rgb(121, 192, 255);\n        justify-content: center;\n        align-items: center;\n        z-index: -1;\n          #editModalDetails, #cancelModalDetails{\n            margin-right: 10px;\n            border: 1px solid black;\n            border-radius: 5px;\n            font-size: 20px;\n            font-family: 'Sniglet', cursive;\n          }\n          div{\n            font-size: 25px;\n            font-family: 'Sniglet', cursive;\n          }\n          #modalTitleData{\n            font-family: \"Cabin Sketch\", cursive;\n            font-size: 40px;\n        }\n          #modalFolderData,\n          #modalPriorityData,\n          #modalDateData,\n          #modalDetailsData {\n            margin-left: 10px;\n            font-size: 20px;\n        }\n      }\n    }\n  }\n  #footer {\n    background-color: aliceblue;\n    border-radius: 15px;\n    bottom: 0px;\n    opacity: 65%;\n    color: rgb(107, 184, 251);\n    padding: 5px 20px 5px 20px;\n    text-align: center;\n    position: fixed;\n  }\n}\n"],sourceRoot:""}]);const d=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);o&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],d=0;d<e.length;d++){var l=e[d],c=o.base?l[0]+o.base:l[0],s=i[c]||0,A="".concat(c," ").concat(s);i[c]=s+1;var u=n(A),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(f);else{var m=r(f,o);o.byIndex=d,t.splice(d,0,{identifier:A,updater:m,references:1})}a.push(A)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=n(i[a]);t[d].references--}for(var l=o(e,r),c=0;c<i.length;c++){var s=n(i[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),a=n.n(i),d=n(565),l=n.n(d),c=n(216),s=n.n(c),A=n(589),u=n.n(A),f=n(192),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=s(),t()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;var p={};function C(){return p}function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function b(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function y(e){b(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===g(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function h(e,t){b(2,arguments);var n=y(e),o=y(t),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}function x(e,t){b(2,arguments);var n,o=y(e),r=y(t),i=h(o,r),a=Math.abs(function(e,t){b(2,arguments);var n=y(e),o=y(t);return 12*(n.getFullYear()-o.getFullYear())+(n.getMonth()-o.getMonth())}(o,r));if(a<1)n=0;else{1===o.getMonth()&&o.getDate()>27&&o.setDate(30),o.setMonth(o.getMonth()-i*a);var d=h(o,r)===-i;(function(e){b(1,arguments);var t=y(e);return function(e){b(1,arguments);var t=y(e);return t.setHours(23,59,59,999),t}(t).getTime()===function(e){b(1,arguments);var t=y(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}(t).getTime()})(y(e))&&1===a&&1===h(e,r)&&(d=!1),n=i*(a-Number(d))}return 0===n?0:n}var v={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},w="trunc";var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function E(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const k={date:E({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:E({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:E({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function T(e){return function(t,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,i=null!=n&&n.width?String(n.width):r;o=e.formattingValues[i]||e.formattingValues[r]}else{var a=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;o=e.values[d]||e.values[a]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const S={ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:T({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:T({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:T({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:T({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:T({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function j(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],i=t.match(r);if(!i)return null;var a,d=i[0],l=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(l);return a=e.valueCallback?e.valueCallback(c):c,{value:a=n.valueCallback?n.valueCallback(a):a,rest:t.slice(d.length)}}}var M,I={ordinalNumber:(M={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(M.matchPattern);if(!n)return null;var o=n[0],r=e.match(M.parsePattern);if(!r)return null;var i=M.valueCallback?M.valueCallback(r[0]):r[0];return{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(o.length)}}),era:j({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:j({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:j({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:j({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:j({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const F={code:"en-US",formatDistance:function(e,t,n){var o,r=B[e];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:k,formatRelative:function(e,t,n,o){return D[e]},localize:S,match:I,options:{weekStartsOn:0,firstWeekContainsDate:1}};function L(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function P(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var z=1440,N=2520,Y=43200,W=86400;function U(e,t,n){var o,r;b(2,arguments);var i=C(),a=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:i.locale)&&void 0!==o?o:F;if(!a.formatDistance)throw new RangeError("locale must contain formatDistance property");var d=h(e,t);if(isNaN(d))throw new RangeError("Invalid time value");var l,c,s=L(L({},n),{addSuffix:Boolean(null==n?void 0:n.addSuffix),comparison:d});d>0?(l=y(t),c=y(e)):(l=y(e),c=y(t));var A,u=function(e,t,n){b(2,arguments);var o,r=function(e,t){return b(2,arguments),y(e).getTime()-y(t).getTime()}(e,t)/1e3;return((o=null==n?void 0:n.roundingMethod)?v[o]:v[w])(r)}(c,l),f=(P(c)-P(l))/1e3,m=Math.round((u-f)/60);if(m<2)return null!=n&&n.includeSeconds?u<5?a.formatDistance("lessThanXSeconds",5,s):u<10?a.formatDistance("lessThanXSeconds",10,s):u<20?a.formatDistance("lessThanXSeconds",20,s):u<40?a.formatDistance("halfAMinute",0,s):u<60?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",1,s):0===m?a.formatDistance("lessThanXMinutes",1,s):a.formatDistance("xMinutes",m,s);if(m<45)return a.formatDistance("xMinutes",m,s);if(m<90)return a.formatDistance("aboutXHours",1,s);if(m<z){var p=Math.round(m/60);return a.formatDistance("aboutXHours",p,s)}if(m<N)return a.formatDistance("xDays",1,s);if(m<Y){var g=Math.round(m/z);return a.formatDistance("xDays",g,s)}if(m<W)return A=Math.round(m/Y),a.formatDistance("aboutXMonths",A,s);if((A=x(c,l))<12){var B=Math.round(m/Y);return a.formatDistance("xMonths",B,s)}var E=A%12,k=Math.floor(A/12);return E<3?a.formatDistance("aboutXYears",k,s):E<9?a.formatDistance("overXYears",k,s):a.formatDistance("almostXYears",k+1,s)}function q(e,t){return b(1,arguments),U(e,Date.now(),t)}function O(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function H(e){b(1,arguments);var t=y(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function $(e){b(1,arguments);var t=y(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=H(o),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=H(i);return t.getTime()>=r.getTime()?n+1:t.getTime()>=a.getTime()?n:n-1}function G(e,t){var n,o,r,i,a,d,l,c;b(1,arguments);var s=C(),A=O(null!==(n=null!==(o=null!==(r=null!==(i=null==t?void 0:t.weekStartsOn)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:s.weekStartsOn)&&void 0!==o?o:null===(l=s.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=y(e),f=u.getUTCDay(),m=(f<A?7:0)+f-A;return u.setUTCDate(u.getUTCDate()-m),u.setUTCHours(0,0,0,0),u}function X(e,t){var n,o,r,i,a,d,l,c;b(1,arguments);var s=y(e),A=s.getUTCFullYear(),u=C(),f=O(null!==(n=null!==(o=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(A+1,0,f),m.setUTCHours(0,0,0,0);var p=G(m,t),g=new Date(0);g.setUTCFullYear(A,0,f),g.setUTCHours(0,0,0,0);var h=G(g,t);return s.getTime()>=p.getTime()?A+1:s.getTime()>=h.getTime()?A:A-1}function J(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const Q=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return J("yy"===t?o%100:o,t.length)},R=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):J(n+1,2)},_=function(e,t){return J(e.getUTCDate(),t.length)},K=function(e,t){return J(e.getUTCHours()%12||12,t.length)},Z=function(e,t){return J(e.getUTCHours(),t.length)},V=function(e,t){return J(e.getUTCMinutes(),t.length)},ee=function(e,t){return J(e.getUTCSeconds(),t.length)},te=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return J(Math.floor(o*Math.pow(10,n-3)),t.length)};var ne={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return Q(e,t)},Y:function(e,t,n,o){var r=X(e,o),i=r>0?r:1-r;return"YY"===t?J(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):J(i,t.length)},R:function(e,t){return J($(e),t.length)},u:function(e,t){return J(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return J(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return J(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return R(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return J(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var r=function(e,t){b(1,arguments);var n=y(e),o=G(n,t).getTime()-function(e,t){var n,o,r,i,a,d,l,c;b(1,arguments);var s=C(),A=O(null!==(n=null!==(o=null!==(r=null!==(i=null==t?void 0:t.firstWeekContainsDate)&&void 0!==i?i:null==t||null===(a=t.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:s.firstWeekContainsDate)&&void 0!==o?o:null===(l=s.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),u=X(e,t),f=new Date(0);return f.setUTCFullYear(u,0,A),f.setUTCHours(0,0,0,0),G(f,t)}(n,t).getTime();return Math.round(o/6048e5)+1}(e,o);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):J(r,t.length)},I:function(e,t,n){var o=function(e){b(1,arguments);var t=y(e),n=H(t).getTime()-function(e){b(1,arguments);var t=$(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),H(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):J(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):_(e,t)},D:function(e,t,n){var o=function(e){b(1,arguments);var t=y(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):J(o,t.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return J(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return J(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return J(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return K(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Z(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):J(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):J(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):V(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ee(e,t)},S:function(e,t){return te(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return re(r);case"XXXX":case"XX":return ie(r);default:return ie(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return re(r);case"xxxx":case"xx":return ie(r);default:return ie(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+oe(r,":");default:return"GMT"+ie(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+oe(r,":");default:return"GMT"+ie(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return J(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return J((o._originalDate||e).getTime(),t.length)}};function oe(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),i=o%60;if(0===i)return n+String(r);var a=t||"";return n+String(r)+a+J(i,2)}function re(e,t){return e%60==0?(e>0?"-":"+")+J(Math.abs(e)/60,2):ie(e,t)}function ie(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+J(Math.floor(r/60),2)+n+J(r%60,2)}const ae=ne;var de=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},le=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const ce={p:le,P:function(e,t){var n,o=e.match(/(P+)(p+)?/)||[],r=o[1],i=o[2];if(!i)return de(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",de(r,t)).replace("{{time}}",le(i,t))}};var se=["D","DD"],Ae=["YY","YYYY"];function ue(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var fe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,me=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,pe=/^'([^]*?)'?$/,Ce=/''/g,ge=/[a-zA-Z]/;function be(e,t,n){var o,r,i,a,d,l,c,s,A,u,f,m,p,h,x,v,w,B;b(2,arguments);var E=String(t),k=C(),D=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:k.locale)&&void 0!==o?o:F,T=O(null!==(i=null!==(a=null!==(d=null!==(l=null==n?void 0:n.firstWeekContainsDate)&&void 0!==l?l:null==n||null===(c=n.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==d?d:k.firstWeekContainsDate)&&void 0!==a?a:null===(A=k.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==i?i:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=O(null!==(f=null!==(m=null!==(p=null!==(h=null==n?void 0:n.weekStartsOn)&&void 0!==h?h:null==n||null===(x=n.locale)||void 0===x||null===(v=x.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==p?p:k.weekStartsOn)&&void 0!==m?m:null===(w=k.locale)||void 0===w||null===(B=w.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==f?f:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var j=y(e);if(!function(e){if(b(1,arguments),!function(e){return b(1,arguments),e instanceof Date||"object"===g(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=y(e);return!isNaN(Number(t))}(j))throw new RangeError("Invalid time value");var M=function(e,t){return b(2,arguments),function(e,t){b(2,arguments);var n=y(e).getTime(),o=O(t);return new Date(n+o)}(e,-O(t))}(j,P(j)),I={firstWeekContainsDate:T,weekStartsOn:S,locale:D,_originalDate:j};return E.match(me).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ce[t])(e,D.formatLong):e})).join("").match(fe).map((function(o){if("''"===o)return"'";var r,i,a=o[0];if("'"===a)return(i=(r=o).match(pe))?i[1].replace(Ce,"'"):r;var d,l=ae[a];if(l)return null!=n&&n.useAdditionalWeekYearTokens||(d=o,-1===Ae.indexOf(d))||ue(o,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==se.indexOf(e)}(o)||ue(o,t,String(e)),l(M,o,D.localize,I);if(a.match(ge))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return o})).join("")}function ye(e){let t=e.target.id,n=document.getElementById(`toDoProj${t}`),o=document.getElementById(`projTitle${t}`).textContent;!1===Ue[t].status?(n.style.border="inset",Ue[t].status=!0,document.getElementById(`projTitle${t}`).innerHTML=`<del>${o}</del>`):(document.getElementById(`projTitle${t}`).innerHTML=`${o}`,n.style.border="1px solid black",Ue[t].status=!1);let r=JSON.stringify(Ue);localStorage.setItem("projectArray",r)}function he(){document.getElementById("contentBody").innerText="";for(let e=0;e<Ue.length;e++)if(Ue[e].folder===Qe){const t=document.getElementById("contentBody");t.style.display="block";const n=document.createElement("div");n.classList.add("toDoProj"),n.id=`toDoProj${e}`;const o=document.createElement("div");o.id="leftsideProj";const r=document.createElement("input");r.type="checkbox",r.checked=Ue[e].status,r.id=`${e}`,r.addEventListener("click",ye),o.appendChild(r);const i=document.createElement("div");i.id=`projTitle${e}`,i.textContent=Ue[e].title,!0===r.checked&&(n.style.border="inset",i.innerHTML=`<del>${Ue[e].title}</del>`),o.appendChild(i);const a=document.createElement("div");a.id="rightsideProj";const d=document.createElement("button");d.id=`${e}`,d.textContent="Details",d.addEventListener("click",Ee),a.appendChild(d);const l=document.createElement("div");if(l.id="projDueDate",Ue[e].date){const t=`Due ${q(new Date(Ue[e].date),{addSuffix:!0})}`;l.textContent=t}a.appendChild(l);const c=document.createElement("button");c.id=`${e}`,c.textContent="X",c.classList.add("cancelProjButton"),c.addEventListener("click",ve),a.appendChild(c),n.appendChild(o),n.appendChild(a),t.appendChild(n),!0===Ue[e].priority&&(i.style.color="red")}}function xe(){const e=document.getElementById("contentBody");e.innerText="",e.style.display="block";for(let t=0;t<Ue.length;t++){const n=document.createElement("div");n.classList.add("toDoProj"),n.id=`toDoProj${t}`;const o=document.createElement("div");o.id="leftsideProj";const r=document.createElement("input");r.type="checkbox",r.checked=Ue[t].status,r.id=`${t}`,r.addEventListener("click",ye),o.appendChild(r);const i=document.createElement("div");i.id=`projTitle${t}`,i.textContent=Ue[t].title,!0===r.checked&&(n.style.border="inset",i.innerHTML=`<del>${Ue[t].title}</del>`),o.appendChild(i);const a=document.createElement("div");a.id="rightsideProj";const d=document.createElement("button");d.id=`${t}`,d.textContent="Details",d.addEventListener("click",Ee),a.appendChild(d);const l=document.createElement("div");if(l.id="projDueDate",Ue[t].date){const e=`Due ${q(new Date(Ue[t].date),{addSuffix:!0})}`;l.textContent=e}a.appendChild(l);const c=document.createElement("button");c.id=`${t}`,c.textContent="X",c.classList.add("cancelProjButton"),c.addEventListener("click",ve),a.appendChild(c),n.appendChild(o),n.appendChild(a),e.appendChild(n),!0===Ue[t].priority&&(i.style.color="red")}}function ve(e){let t=e.target.id;Ue.splice(t,1),"General"===Qe?xe():he();let n=JSON.stringify(Ue);localStorage.setItem("projectArray",n)}let we,Be=!0;function Ee(e){we=e.target.id;const t=document.getElementById("modalTitleData"),n=document.getElementById("modalFolderData"),o=document.getElementById("modalDateData"),r=document.getElementById("modalPriorityData"),i=document.getElementById("modalDetailsData"),a=document.getElementById("modalDetails");if(!0===Be){if(a.style.transition="opacity .6s ease-in",a.style.display="flex",a.style.opacity="100%",a.style.zIndex="1",t.innerText=Ue[we].title,n.innerText=Ue[we].folder,Ue[we].date){const e=be(new Date(Ue[we].date),"MMMM dd, yyyy");o.innerText=e}i.innerText=Ue[we].description,!0===Ue[we].priority&&(r.innerText="High"),!1===Ue[we].priority&&(r.innerText="Low"),Be=!1}else a.style.opacity="0",a.style.zIndex="-1",Be=!0}function ke(){modalDetails.style.opacity="0",modalDetails.style.zIndex="-1",Be=!0}document.getElementById("cancelModalDetails").addEventListener("click",ke);const De=document.getElementById("editModalDetails");let Te=!1,Se="";De.addEventListener("click",(()=>{Te=!0,ke(),We(),document.getElementById("projectTitle").value=`${Ue[we].title}`,document.getElementById("projectDescription").value=`${Ue[we].description}`,document.getElementById("dueDate").value=`${Ue[we].date}`,document.getElementById("priority").checked=Ue[we].priority,Se=Ue[we].folder}));let je=!0;const Me=document.getElementById("noteBox");function Ie(){!1===Ye&&addProj(),!0===je?(Me.style.transition="opacity .6s ease-in",Me.style.opacity="100%",Me.style.zIndex="1",je=!1,document.getElementById("noteTitle").focus()):(Me.style.opacity="0",Me.style.zIndex="-1",je=!0,document.getElementById("noteTitle").value="",document.getElementById("noteDescription").value="")}document.getElementById("card");let Fe=[];function Le(){const e=document.getElementById("contentBody");e.innerText="";const t=document.getElementById("currentFolderName");t.innerText="Notepad",Qe=t.innerText,e.style.display="grid";for(let t=0;t<Fe.length;t++){const n=document.createElement("div");n.classList.add("toDoNote"),n.id=`toDoNote${t}`,n.style.position="relative",n.style.backgroundColor=`${Fe[t].color}`;const o=document.createElement("h3");o.className="noteTitleH3",o.id=`${t}`,o.textContent=Fe[t].title,o.contentEditable=!0,o.spellcheck=!1,o.addEventListener("input",Pe),n.appendChild(o);const r=document.createElement("div");r.className="noteDescriptionDiv",r.id=`${t}`,r.contentEditable=!0,r.spellcheck=!1,r.addEventListener("input",Pe),r.textContent=Fe[t].description,n.appendChild(r);const i=document.createElement("button");i.style.position="absolute",i.style.bottom="5px",i.id=`${t}`,i.textContent="X",i.classList.add("removeNoteButton"),i.addEventListener("click",ze),n.appendChild(i),e.appendChild(n)}}function Pe(e){let t=e.target.id;if("noteTitleH3"===e.target.className){Fe[t].title=e.target.innerText;let n=JSON.stringify(Fe);localStorage.setItem("notepadStorage",n)}if("noteDescriptionDiv"===e.target.className){Fe[t].description=e.target.innerText;let n=JSON.stringify(Fe);localStorage.setItem("notepadStorage",n)}}function ze(e){let t=e.target.id;Fe.splice(t,1),Le();let n=JSON.stringify(Fe);localStorage.setItem("notepadStorage",n)}const Ne=document.getElementById("formBox");let Ye=!0;function We(){"Notepad"!==Qe?!0===Ye?(Ne.style.transition="opacity .6s ease-in",Ne.style.display="flex",Ne.style.opacity="100%",Ne.style.zIndex="1",Ye=!1,document.getElementById("projectTitle").focus()):(Ne.style.opacity="0",Ne.style.zIndex="-1",Ye=!0,document.getElementById("projectTitle").value="",document.getElementById("projectDescription").value="",document.getElementById("dueDate").value="",document.getElementById("priority").checked=!1):Ie()}let Ue=[];function qe(){document.getElementById("newFolderLI").remove()}document.getElementById("cancelProject").addEventListener("click",(function(){Ne.style.opacity="0",Ne.style.zIndex="-1",Ye=!0,document.getElementById("projectTitle").value="",document.getElementById("projectDescription").value="",document.getElementById("dueDate").value="",document.getElementById("priority").checked=!1}));const Oe=document.getElementById("folderButtonHolder");function He(){const e=document.getElementById("folderEditor");Oe.removeChild(folderDestroyer),Oe.removeChild(e)}function $e(){const e=document.getElementById("projectList");let t=[];for(let n=0;n<e.children.length;n++)"General"!==e.children[n].textContent&&"+"!==e.children[n].textContent&&t.push(e.children[n].textContent);let n=JSON.stringify(t);localStorage.setItem("sidebarFolders",n)}function Ge(){let e=[];for(let t=0;t<Ue.length;t++)Ue[t].folder!==Qe&&e.push(Ue[t]);Ue=e;const t=document.getElementById("currentFolderName");let n=Qe;t.innerText="General",Qe="General",He(),xe();for(let e=0;e<projectList.children.length;e++)projectList.children[e].innerText===n&&projectList.children[e].remove();$e();let o=JSON.stringify(Ue);localStorage.setItem("projectArray",o)}const Xe=document.getElementById("editFolderForm");function Je(){Xe.style.transition="opacity .6s ease-in",Xe.style.display="flex",Xe.style.opacity="100%",Xe.style.zIndex="1"}let Qe="General";const Re=document.getElementById("addProjectButton"),_e=document.getElementById("submitProject"),Ke=document.getElementById("submitNote"),Ze=document.getElementById("addToDoItem"),Ve=document.querySelectorAll(".projectFolder"),et=document.getElementById("currentFolderName"),tt=document.getElementById("cancelNote"),nt=document.getElementById("notepadFolder"),ot=document.getElementById("cancelFolderName"),rt=document.getElementById("submitFolderName");nt.addEventListener("click",Le),nt.addEventListener("click",(()=>{document.getElementById("folderDestroyer")&&He()})),rt.addEventListener("click",(function(){const e=document.getElementById("editFolderInput");let t=e.value;if(""!==t){Xe.style.opacity="0",Xe.style.zIndex="-1",e.value="";for(let e=0;e<Ue.length;e++)Ue[e].folder===Qe&&(Ue[e].folder=t);document.getElementById("currentFolderName").innerText=t;for(let e=0;e<projectList.children.length;e++)projectList.children[e].innerText===Qe&&(projectList.children[e].getElementsByTagName("span")[0].innerText=t);Qe=t}let n=JSON.stringify(Ue);localStorage.setItem("projectArray",n),$e()})),tt.addEventListener("click",(function(){Me.style.opacity="0",Me.style.zIndex="-1",je=!0,document.getElementById("noteTitle").value="",document.getElementById("noteDescription").value=""})),ot.addEventListener("click",(function(){Xe.style.opacity="0",Xe.style.zIndex="-1"})),Re.addEventListener("click",(function(){if(document.getElementById("newFolderBox"))return;const e=document.createElement("li");e.setAttribute("id","newFolderLI");const t=document.createElement("div");t.setAttribute("id","newFolderBox");const n=document.createElement("input");n.setAttribute("id","newFolder"),n.setAttribute("type","text"),n.setAttribute("placeholder","Enter Project Name");const o=document.createElement("div");o.setAttribute("id","newFolderButtons");const r=document.createElement("button");r.textContent="Add",r.setAttribute("id","addFolderButton");const i=document.createElement("button");i.setAttribute("id","deleteFolderButton"),i.textContent="X",i.addEventListener("click",qe),e.appendChild(t),t.appendChild(n),t.appendChild(o),o.appendChild(r),o.appendChild(i);const a=document.getElementById("projectList");a.insertBefore(e,a.children[a.children.length-1]),n.focus()})),Ze.addEventListener("click",We),Ke.addEventListener("click",(function(e){let t=document.getElementById("noteTitle").value,n=document.getElementById("noteDescription").value,o=document.getElementById("colorSelect").value;if(t){Fe.push(new function(e,t,n){this.title=e,this.description=t,this.color=n}(t,n,o)),e.preventDefault(),Ie(),Le();let r=JSON.stringify(Fe);localStorage.setItem("notepadStorage",r)}})),_e.addEventListener("click",(function(e){let t=document.getElementById("projectTitle").value,n=document.getElementById("projectDescription").value,o=document.getElementById("dueDate").value,r=document.getElementById("priority").checked;if(""!==t){function i(e,t,n,o,r,i){this.title=e,this.description=t,this.date=n,this.priority=o,this.folder=r,this.status=!1}!1===Te&&(Ue.push(new i(t,n,o,r,Qe,status)),e.preventDefault(),We(),function(){let e=Ue.length-1;const t=document.getElementById("contentBody");t.style.display="block";const n=document.createElement("div");n.classList.add("toDoProj"),n.id=`toDoProj${e}`;const o=document.createElement("div");o.id="leftsideProj";const r=document.createElement("input");r.type="checkbox",r.id=`${e}`,r.checked=Ue[e].status,r.addEventListener("click",ye),o.appendChild(r);const i=document.createElement("div");i.id=`projTitle${e}`,i.textContent=Ue[e].title,o.appendChild(i);const a=document.createElement("div");a.id="rightsideProj";const d=document.createElement("button");d.id=`${e}`,d.textContent="Details",d.addEventListener("click",Ee),a.appendChild(d);const l=document.createElement("div");if(l.id="projDueDate",Ue[e].date){const t=`Due ${q(new Date(Ue[e].date),{addSuffix:!0})}`;l.textContent=t}a.appendChild(l);const c=document.createElement("button");c.id=`${e}`,c.classList.add("cancelProjButton"),c.textContent="X",c.addEventListener("click",ve),a.appendChild(c),n.appendChild(o),n.appendChild(a),t.appendChild(n),!0===Ue[e].priority&&(i.style.color="red")}()),!0===Te&&(Ue[we]=new i(t,n,o,r,Se),document.getElementById("contentBody").innerText="",e.preventDefault(),"General"===Qe?xe():he(),Te=!1,We());let a=JSON.stringify(Ue);localStorage.setItem("projectArray",a)}})),document.addEventListener("click",(function(e){const t=e.target.closest("#addFolderButton"),n=document.getElementById("newFolder");if(e.target.closest("#deleteFolderButton"),t&&""!==n.value){let e=n.value;const t=document.createElement("li"),o=document.createElement("span"),r=document.getElementById("newFolderLI");o.classList.add("projectFolder"),o.addEventListener("click",(()=>{const e=document.getElementById("currentFolderName");e.innerText=`${o.innerText}`,Qe=e.innerText;const t=document.getElementById("folderDestroyer");if("General"!==Qe&&"Notepad"!==Qe&&!t){const e=document.createElement("button");e.innerText="Edit Folder",e.setAttribute("id","folderEditor"),e.addEventListener("click",Je),Oe.appendChild(e);const t=document.createElement("button");t.innerText="Delete Folder",t.setAttribute("id","folderDestroyer"),t.addEventListener("click",Ge),Oe.appendChild(t)}he()})),o.textContent=e,t.appendChild(o);const i=document.getElementById("projectList");r.remove(),i.insertBefore(t,i.children[i.children.length-1]),$e()}})),Ve.forEach((e=>{e.addEventListener("click",(()=>{et.innerText=`${e.innerHTML}`,Qe=et.innerText,"generalFolder"!==e.id&&he(),"generalFolder"===e.id&&(xe(),document.getElementById("folderDestroyer")&&He())}))}));const it=localStorage.getItem("projectArray");if(it){let e=JSON.parse(it);Ue=e,xe()}const at=localStorage.getItem("sidebarFolders"),dt=document.getElementById("folderButtonHolder");if(at){let e=document.getElementById("projectList");const t=JSON.parse(at);for(let n=0;n<t.length;n++){const o=document.createElement("li"),r=document.createElement("span");r.classList.add("projectFolder"),r.addEventListener("click",(()=>{const e=document.getElementById("currentFolderName");e.innerText=`${r.innerText}`,Qe=e.innerText;const t=document.getElementById("folderDestroyer");if("General"!==Qe&&"Notepad"!==Qe&&!t){const e=document.createElement("button");e.innerText="Edit Folder",e.setAttribute("id","folderEditor"),e.addEventListener("click",Je),dt.appendChild(e);const t=document.createElement("button");t.innerText="Delete Folder",t.setAttribute("id","folderDestroyer"),t.addEventListener("click",Ge),dt.appendChild(t)}he()})),r.textContent=t[n],o.appendChild(r),e.insertBefore(o,e.children[e.children.length-1])}}const lt=localStorage.getItem("notepadStorage");if(lt){let e=JSON.parse(lt);Fe=e}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxVQUFVQyxJQUFJLGlCQUMxQnFHLEVBQVloRyxpQkFBaUIsU0FBUyxLQUNwQyxNQUFNaUMsRUFBYS9iLFNBQVN3WSxlQUFlLHFCQUMzQ3VELEVBQVc1QyxVQUFZLEdBQUcyRyxFQUFZM0csWUFDdENFLEdBQW9CMEMsRUFBVzVDLFVBQy9CLE1BQU1pRSxFQUFrQnBkLFNBQVN3WSxlQUFlLG1CQUNoRCxHQUN3QixZQUF0QmEsSUFDc0IsWUFBdEJBLEtBQ0MrRCxFQUNELENBQ0EsTUFBTTRDLEVBQW1CaGdCLFNBQVNXLGNBQWMsVUFDaERxZixFQUFpQjdHLFVBQVksY0FDN0I2RyxFQUFpQmhmLGFBQWEsS0FBTSxnQkFDcENnZixFQUFpQmxHLGlCQUFpQixRQUFTZ0UsSUFDM0MsR0FBbUJyZCxZQUFZdWYsR0FDL0IsTUFBTUMsRUFBcUJqZ0IsU0FBU1csY0FBYyxVQUNsRHNmLEVBQW1COUcsVUFBWSxnQkFDL0I4RyxFQUFtQmpmLGFBQWEsS0FBTSxtQkFDdENpZixFQUFtQm5HLGlCQUFpQixRQUFTNEQsSUFDN0MsR0FBbUJqZCxZQUFZd2YsRUFDakMsQ0FDQS9HLElBQXVCLElBR3pCNEcsRUFBWXBILFlBQWM2RSxFQUFhN2dCLEdBQ3ZDbWpCLEVBQVVwZixZQUFZcWYsR0FDckJ4QyxFQUFZMEIsYUFDVmEsRUFDQXZDLEVBQVlFLFNBQVNGLEVBQVlFLFNBQVNoaEIsT0FBUyxHQUV4RCxDQUNGLENBRUEsTUFBTWdrQixHQUFxQnhILGFBQWFvSCxRQUFRLGtCQUNoRCxHQUFJSSxHQUFvQixDQUN0QixJQUFJQyxFQUFvQmhqQixLQUFLNmlCLE1BQU1FLElBQ25DM0UsR0FBVzRFLENBQ2IsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvc3R5bGUuc2Nzcz83NWJhIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbXBhcmVBc2MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluTW9udGhzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzTGFzdERheU9mTW9udGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JvdW5kaW5nTWV0aG9kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJblNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdERpc3RhbmNlVG9Ob3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvZGlzcGxheVByb2plY3RzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvZGlzcGxheU5vdGVzLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvYWRkUHJvamVjdC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Q2FiaW4rU2tldGNoJmZhbWlseT1EZWtrbyZmYW1pbHk9UXVpY2tzYW5kJmZhbWlseT1Sb2JvdG86d2dodEAzMDAmZmFtaWx5PVNuaWdsZXQmZmFtaWx5PVdhbHRlcitUdXJuY29hdCZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5e2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbjowO3BhZGRpbmc6MDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDIxM2F9Ym9keSBidXR0b246aG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9Ym9keSAjY2FyZHtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1yb3dzOjFmciA5ZnI7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjJmciA0ZnI7bWFyZ2luLXRvcDoxMDBweDtiYWNrZ3JvdW5kLWNvbG9yOiNmMGY4ZmY7aGVpZ2h0OjcwMHB4O3dpZHRoOjEyMDBweDtib3JkZXItcmFkaXVzOjEwcHh9Ym9keSAjY2FyZCAjaGVhZGVye2dyaWQtY29sdW1uOjEvMztib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjMmI0MWNmO3BhZGRpbmc6MTVweCAzMHB4IDEwcHggMzBweDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7YmFja2dyb3VuZC1jb2xvcjojNDZhOWZmO2ZvbnQtc2l6ZTozNXB4O2JvcmRlci10b3AtbGVmdC1yYWRpdXM6MTBweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czoxMHB4O2ZvbnQtZmFtaWx5OlxcXCJDYWJpbiBTa2V0Y2hcXFwiLGN1cnNpdmV9Ym9keSAjY2FyZCAjaGVhZGVyIGJ1dHRvbntib3JkZXItcmFkaXVzOjVweDtoZWlnaHQ6MjVweDtmb250LXdlaWdodDo5MDA7Zm9udC1zaXplOjE1cHg7Zm9udC1mYW1pbHk6XFxcIlF1aWNrc2FuZFxcXCIsc2Fucy1zZXJpZjtjb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiM2YmI4ZmJ9Ym9keSAjY2FyZCAjaGVhZGVyIGJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiM1YmFmZjl9Ym9keSAjY2FyZCAjc2lkZWJhcntmb250LWZhbWlseTpcXFwiV2FsdGVyIFR1cm5jb2F0XFxcIixjdXJzaXZlO2ZvbnQtc2l6ZToyMHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjEwcHggMTBweCAxMHB4IDIwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtncmlkLXJvdzoyLzM7bWFyZ2luOjA7d2lkdGg6MjM1cHg7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZC1jb2xvcjojZjdmZGQ5O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MTBweH1ib2R5ICNjYXJkICNzaWRlYmFyICNwcm9qZWN0TGlzdCxib2R5ICNjYXJkICNzaWRlYmFyICNub3RlTGlzdHtsaXN0LXN0eWxlOm5vbmV9Ym9keSAjY2FyZCAjc2lkZWJhciAjcHJvamVjdExpc3QgbGksYm9keSAjY2FyZCAjc2lkZWJhciAjbm90ZUxpc3QgbGl7bWFyZ2luLWJvdHRvbToxMHB4fWJvZHkgI2NhcmQgI3NpZGViYXIgI3Byb2plY3RMaXN0ICNhZGRQcm9qZWN0QnV0dG9uLGJvZHkgI2NhcmQgI3NpZGViYXIgI25vdGVMaXN0ICNhZGRQcm9qZWN0QnV0dG9ue2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjI1cHg7d2lkdGg6MjVweDtmb250LXNpemU6MjBweDtmb250LWZhbWlseTpcXFwiV2FsdGVyIFR1cm5jb2F0XFxcIixjdXJzaXZlO2ZvbnQtd2VpZ2h0OjcwMDtjb2xvcjojM2YyNzBjO2JvcmRlci1yYWRpdXM6NXB4O2JvcmRlcjojYWFhNzUzIDJweDtib3JkZXItc3R5bGU6ZGFzaGVkO2JhY2tncm91bmQtY29sb3I6I2ZmZmJlZH1ib2R5ICNjYXJkICNzaWRlYmFyICNwcm9qZWN0TGlzdCAjbmV3Rm9sZGVyTEksYm9keSAjY2FyZCAjc2lkZWJhciAjbm90ZUxpc3QgI25ld0ZvbGRlckxJe21hcmdpbjoxMHB4IDAgMTBweCAtNTBweH1ib2R5ICNjYXJkICNzaWRlYmFyICNwcm9qZWN0TGlzdCAjbmV3Rm9sZGVyTEkgaW5wdXQsYm9keSAjY2FyZCAjc2lkZWJhciAjbm90ZUxpc3QgI25ld0ZvbGRlckxJIGlucHV0e2JvcmRlci1yYWRpdXM6MTBweDtib3JkZXI6MXB4IHNvbGlkICNmZmY7aGVpZ2h0OjIwcHg7Zm9udC1mYW1pbHk6Um9ib3RvLHNhbnMtc2VyaWY7Zm9udC1zaXplOjE1cHh9Ym9keSAjY2FyZCAjc2lkZWJhciAjcHJvamVjdExpc3QgI25ld0ZvbGRlckxJICNuZXdGb2xkZXJCdXR0b25zLGJvZHkgI2NhcmQgI3NpZGViYXIgI25vdGVMaXN0ICNuZXdGb2xkZXJMSSAjbmV3Rm9sZGVyQnV0dG9uc3ttYXJnaW4tbGVmdDotMjBweH1ib2R5ICNjYXJkICNzaWRlYmFyICNwcm9qZWN0TGlzdCAjbmV3Rm9sZGVyTEkgI25ld0ZvbGRlckJ1dHRvbnMgYnV0dG9uLGJvZHkgI2NhcmQgI3NpZGViYXIgI25vdGVMaXN0ICNuZXdGb2xkZXJMSSAjbmV3Rm9sZGVyQnV0dG9ucyBidXR0b257Ym9yZGVyLXJhZGl1czoxMHB4O2JvcmRlci1jb2xvcjojMzdjMmZkO2ZvbnQtZmFtaWx5OlxcXCJTbmlnbGV0XFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI3NpZGViYXIgLnByb2plY3RGb2xkZXIsYm9keSAjY2FyZCAjc2lkZWJhciAubm90ZUZvbGRlcntmb250LXNpemU6MjBweDtkaXNwbGF5OmlubGluZS1ibG9ja31ib2R5ICNjYXJkICNzaWRlYmFyIC5wcm9qZWN0Rm9sZGVyOmhvdmVyLGJvZHkgI2NhcmQgI3NpZGViYXIgLm5vdGVGb2xkZXI6aG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9Ym9keSAjY2FyZCAjc2lkZWJhciAjbmV3Rm9sZGVyQm94e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9Ym9keSAjY2FyZCAjc2lkZWJhciAjbmV3Rm9sZGVyQm94ICNuZXdGb2xkZXJCdXR0b25ze2Rpc3BsYXk6ZmxleDtjb2x1bW4tZ2FwOjE1cHg7bWFyZ2luOjVweH1ib2R5ICNjYXJkICNjb250ZW50LWNhcmR7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6IzAwMGYzMztkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dyaWQtY29sdW1uOjIvMztwYWRkaW5nOjFweCAwIDAgMXB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjEwcHh9Ym9keSAjY2FyZCAjY29udGVudC1jYXJkICNjb250ZW50LWNhcmQtYnV0dG9uc3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO3BhZGRpbmc6NXB4IDMwcHggNXB4IDA7Zm9udC1zaXplOjIwcHg7YWxpZ24taXRlbXM6Y2VudGVyO2NvbHVtbi1nYXA6MzBweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czoxMHB4O2JhY2tncm91bmQtY29sb3I6IzI4YzlmOTtib3JkZXItdG9wOjFweCBzb2xpZCAjMDAwO2ZvbnQtZmFtaWx5OlxcXCJDYWJpbiBTa2V0Y2hcXFwiLGN1cnNpdmV9Ym9keSAjY2FyZCAjY29udGVudC1jYXJkICNjb250ZW50LWNhcmQtYnV0dG9ucyBidXR0b257Zm9udC1zaXplOjIwcHg7Ym9yZGVyLXJhZGl1czoxNXB4O2JvcmRlcjoxcHggc29saWQgYmx1ZTtmb250LWZhbWlseTpcXFwiQ2FiaW4gU2tldGNoXFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI2NvbnRlbnR7YmFja2dyb3VuZC1jb2xvcjojY2ZmNmZjO2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjVweDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOnJlbGF0aXZlfWJvZHkgI2NhcmQgI2NvbnRlbnQgI2N1cnJlbnRGb2xkZXJEaXNwbGF5e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjtjb2x1bW4tZ2FwOjEwcHg7cGFkZGluZzoxMnB4O2ZvbnQtZmFtaWx5OlxcXCJDYWJpbiBTa2V0Y2hcXFwiLGN1cnNpdmU7Zm9udC1zaXplOjI1cHg7Ym9yZGVyLWJvdHRvbToxcHggZGFzaGVkICMwMDB9Ym9keSAjY2FyZCAjY29udGVudCAjY3VycmVudEZvbGRlckRpc3BsYXkgI2ZvbGRlckRlc3Ryb3llcixib2R5ICNjYXJkICNjb250ZW50ICNjdXJyZW50Rm9sZGVyRGlzcGxheSAjZm9sZGVyRWRpdG9ye21hcmdpbi1yaWdodDoxMHB4O2JvcmRlci1yYWRpdXM6MTBweDtib3JkZXI6MXB4IHNvbGlkICMwMDA7Zm9udC1mYW1pbHk6XFxcIkNhYmluIFNrZXRjaFxcXCIsY3Vyc2l2ZTtwYWRkaW5nOjRweH1ib2R5ICNjYXJkICNjb250ZW50ICNjb250ZW50Qm9keXtkaXNwbGF5OmJsb2NrO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgMWZyIDFmciAxZnI7b3ZlcmZsb3cteTphdXRvO3dpZHRoOjEwMDBweDtoZWlnaHQ6NTgwcHg7cm93LWdhcDo1cHh9Ym9keSAjY2FyZCAjY29udGVudCAudG9Eb05vdGV7Ym9yZGVyOjFweCBzb2xpZCAjMDAwO2JhY2tncm91bmQtY29sb3I6I2ZmMDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtvdmVyZmxvdy15OmF1dG87d2lkdGg6MjAwcHg7aGVpZ2h0OjIwMHB4O3BhZGRpbmc6NXB4O2ZvbnQtZmFtaWx5OlxcXCJXYWx0ZXIgVHVybmNvYXRcXFwiLGN1cnNpdmU7cmVzaXplOmJvdGh9Ym9keSAjY2FyZCAjY29udGVudCAudG9Eb05vdGUgLnJlbW92ZU5vdGVCdXR0b257Ym9yZGVyLXJhZGl1czoxMHB4O2JvcmRlcjoxcHggc29saWQgIzAwMDtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxcHg7dG9wOjFweDtoZWlnaHQ6MTVweDtmb250LXNpemU6MTBweDt0ZXh0LWFsaWduOmNlbnRlcjtvdmVyZmxvdzpoaWRkZW47Zm9udC1mYW1pbHk6XFxcIkNhYmluIFNrZXRjaFxcXCIsY3Vyc2l2ZX1ib2R5ICNjYXJkICNjb250ZW50IC50b0RvTm90ZSAucmVtb3ZlTm90ZUJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNjNWM1YzV9Ym9keSAjY2FyZCAjY29udGVudCAudG9Eb1Byb2p7ZGlzcGxheTpmbGV4O2JhY2tncm91bmQtY29sb3I6I2RkZjlmYjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjtwYWRkaW5nOjEwcHg7Zm9udC1zaXplOjIwcHg7YWxpZ24taXRlbXM6Y2VudGVyO2JvcmRlcjoxcHggc29saWQgIzAwMDtmb250LWZhbWlseTpcXFwiUXVpY2tzYW5kXFxcIixzYW5zLXNlcmlmfWJvZHkgI2NhcmQgI2NvbnRlbnQgLnRvRG9Qcm9qICNsZWZ0c2lkZVByb2p7ZGlzcGxheTpmbGV4O2NvbHVtbi1nYXA6MTBweH1ib2R5ICNjYXJkICNjb250ZW50IC50b0RvUHJvaiAjcmlnaHRzaWRlUHJvantkaXNwbGF5OmZsZXg7Y29sdW1uLWdhcDoxMHB4fWJvZHkgI2NhcmQgI2NvbnRlbnQgLnRvRG9Qcm9qICNyaWdodHNpZGVQcm9qIGJ1dHRvbntib3JkZXItcmFkaXVzOjVweDtib3JkZXI6MXB4IHNvbGlkICMwMDA7YmFja2dyb3VuZC1jb2xvcjojZTJmOGZkfWJvZHkgI2NhcmQgI2NvbnRlbnQgI2VkaXRGb2xkZXJGb3Jte29wYWNpdHk6MCU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDozNTBweDt0b3A6MTcwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojNmJiOGZiO2JvcmRlci1yYWRpdXM6MTBweDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjt6LWluZGV4Oi0xO3Jvdy1nYXA6OHB4O2ZvbnQtZmFtaWx5OlxcXCJDYWJpbiBTa2V0Y2hcXFwiLGN1cnNpdmV9Ym9keSAjY2FyZCAjY29udGVudCAjZWRpdEZvbGRlckZvcm0gaW5wdXR7Ym9yZGVyLXJhZGl1czoxMHB4fWJvZHkgI2NhcmQgI2NvbnRlbnQgI2VkaXRGb2xkZXJGb3JtIGJ1dHRvbntib3JkZXI6MXB4IHNvbGlkICMwMDA7Ym9yZGVyLXJhZGl1czoxMHB4O21hcmdpbi1sZWZ0OjhweDtmb250LWZhbWlseTpcXFwiV2FsdGVyIFR1cm5jb2F0XFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3h7b3BhY2l0eTowJTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjIwMHB4O3RvcDoxNzBweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3BhZGRpbmc6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiM2YmI4ZmI7Ym9yZGVyLXJhZGl1czoxMHB4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3otaW5kZXg6LTF9Ym9keSAjY2FyZCAjY29udGVudCAjZm9ybUJveCAjZm9ybUJvdHRvbXtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfWJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI2Zvcm1Cb3R0b20gI3ByaW9yaXR5e21hcmdpbi1yaWdodDoyMHB4fWJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI21vZGFsRm9ybXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3otaW5kZXg6LTE7bWFyZ2luOjAgNXB4IDVweCA1cHg7Zm9udC1zaXplOjIwcHg7Zm9udC1mYW1pbHk6XFxcIkRla2tvXFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI21vZGFsRm9ybSBpbnB1dCxib2R5ICNjYXJkICNjb250ZW50ICNmb3JtQm94ICNtb2RhbEZvcm0gI3Byb2plY3REZXNjcmlwdGlvbntib3JkZXItcmFkaXVzOjEwcHg7Ym9yZGVyLXN0eWxlOm5vbmV9Ym9keSAjY2FyZCAjY29udGVudCAjZm9ybUJveCAjYnV0dG9uRm9ybUJveHtkaXNwbGF5OmZsZXg7Y29sdW1uLWdhcDoyNXB4fWJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI2J1dHRvbkZvcm1Cb3ggYnV0dG9uLGJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI2J1dHRvbkZvcm1Cb3ggaW5wdXR7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyLXN0eWxlOm5vbmU7aGVpZ2h0OjIwcHg7bWluLXdpZHRoOjI1cHg7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1mYW1pbHk6XFxcIkRla2tvXFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI2J1dHRvbkZvcm1Cb3ggYnV0dG9uOmhvdmVyLGJvZHkgI2NhcmQgI2NvbnRlbnQgI2Zvcm1Cb3ggI2J1dHRvbkZvcm1Cb3ggaW5wdXQ6aG92ZXJ7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZDhlZGZmO2JvcmRlcjpibHVlIDFweCBzb2xpZH1ib2R5ICNjYXJkICNjb250ZW50ICNub3RlQm94e29wYWNpdHk6MCU7cG9zaXRpb246YWJzb2x1dGU7bGVmdDoyMDBweDt0b3A6MTcwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtwYWRkaW5nOjEwcHg7YmFja2dyb3VuZC1jb2xvcjojNmJiOGZiO2JvcmRlci1yYWRpdXM6MTBweDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjt6LWluZGV4Oi0xfWJvZHkgI2NhcmQgI2NvbnRlbnQgI25vdGVCb3ggI25vdGVGb3Jte2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7ei1pbmRleDotMTttYXJnaW46MCA1cHggNXB4IDVweDtmb250LXNpemU6MjBweDtmb250LWZhbWlseTpcXFwiRGVra29cXFwiLGN1cnNpdmV9Ym9keSAjY2FyZCAjY29udGVudCAjbm90ZUJveCAjbm90ZUZvcm0gaW5wdXQsYm9keSAjY2FyZCAjY29udGVudCAjbm90ZUJveCAjbm90ZUZvcm0gI25vdGVEZXNjcmlwdGlvbntib3JkZXItcmFkaXVzOjEwcHg7Ym9yZGVyLXN0eWxlOm5vbmV9Ym9keSAjY2FyZCAjY29udGVudCAjbm90ZUJveCAjYnV0dG9uRm9ybUJveHtkaXNwbGF5OmZsZXg7Y29sdW1uLWdhcDoyNXB4fWJvZHkgI2NhcmQgI2NvbnRlbnQgI25vdGVCb3ggI2J1dHRvbkZvcm1Cb3ggYnV0dG9uLGJvZHkgI2NhcmQgI2NvbnRlbnQgI25vdGVCb3ggI2J1dHRvbkZvcm1Cb3ggaW5wdXR7Ym9yZGVyLXJhZGl1czo1cHg7Ym9yZGVyLXN0eWxlOm5vbmU7aGVpZ2h0OjIwcHg7bWluLXdpZHRoOjI1cHg7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1mYW1pbHk6XFxcIkRla2tvXFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI2NvbnRlbnQgI25vdGVCb3ggI2J1dHRvbkZvcm1Cb3ggYnV0dG9uOmhvdmVyLGJvZHkgI2NhcmQgI2NvbnRlbnQgI25vdGVCb3ggI2J1dHRvbkZvcm1Cb3ggaW5wdXQ6aG92ZXJ7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZDhlZGZmO2JvcmRlcjpibHVlIDFweCBzb2xpZH1ib2R5ICNjYXJkICNjb250ZW50ICNtb2RhbERldGFpbHN7b3BhY2l0eTowJTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDozMDBweDtsZWZ0OjI3MHB4O3RvcDoxNzBweDtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZvbnQtc2l6ZToyMHB4O3BhZGRpbmc6MTVweDtib3JkZXItcmFkaXVzOjEwcHg7Ym9yZGVyOjFweCBzb2xpZCAjMDAwO2ZvbnQtZmFtaWx5OlxcXCJRdWlja3NhbmRcXFwiLHNhbnMtc2VyaWY7YmFja2dyb3VuZC1jb2xvcjojNzljMGZmO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3otaW5kZXg6LTF9Ym9keSAjY2FyZCAjY29udGVudCAjbW9kYWxEZXRhaWxzICNlZGl0TW9kYWxEZXRhaWxzLGJvZHkgI2NhcmQgI2NvbnRlbnQgI21vZGFsRGV0YWlscyAjY2FuY2VsTW9kYWxEZXRhaWxze21hcmdpbi1yaWdodDoxMHB4O2JvcmRlcjoxcHggc29saWQgIzAwMDtib3JkZXItcmFkaXVzOjVweDtmb250LXNpemU6MjBweDtmb250LWZhbWlseTpcXFwiU25pZ2xldFxcXCIsY3Vyc2l2ZX1ib2R5ICNjYXJkICNjb250ZW50ICNtb2RhbERldGFpbHMgZGl2e2ZvbnQtc2l6ZToyNXB4O2ZvbnQtZmFtaWx5OlxcXCJTbmlnbGV0XFxcIixjdXJzaXZlfWJvZHkgI2NhcmQgI2NvbnRlbnQgI21vZGFsRGV0YWlscyAjbW9kYWxUaXRsZURhdGF7Zm9udC1mYW1pbHk6XFxcIkNhYmluIFNrZXRjaFxcXCIsY3Vyc2l2ZTtmb250LXNpemU6NDBweH1ib2R5ICNjYXJkICNjb250ZW50ICNtb2RhbERldGFpbHMgI21vZGFsRm9sZGVyRGF0YSxib2R5ICNjYXJkICNjb250ZW50ICNtb2RhbERldGFpbHMgI21vZGFsUHJpb3JpdHlEYXRhLGJvZHkgI2NhcmQgI2NvbnRlbnQgI21vZGFsRGV0YWlscyAjbW9kYWxEYXRlRGF0YSxib2R5ICNjYXJkICNjb250ZW50ICNtb2RhbERldGFpbHMgI21vZGFsRGV0YWlsc0RhdGF7bWFyZ2luLWxlZnQ6MTBweDtmb250LXNpemU6MjBweH1ib2R5ICNmb290ZXJ7YmFja2dyb3VuZC1jb2xvcjojZjBmOGZmO2JvcmRlci1yYWRpdXM6MTVweDtib3R0b206MHB4O29wYWNpdHk6NjUlO2NvbG9yOiM2YmI4ZmI7cGFkZGluZzo1cHggMjBweCA1cHggMjBweDt0ZXh0LWFsaWduOmNlbnRlcjtwb3NpdGlvbjpmaXhlZH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQSxLQUNFLHFCQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQkFBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBQ0Esd0JBQUEsQ0FFQSxrQkFDRSxjQUFBLENBRUYsV0FDRSxZQUFBLENBQ0EsMEJBQUEsQ0FDQSw2QkFBQSxDQUNBLGdCQUFBLENBQ0Esd0JBQUEsQ0FDQSxZQUFBLENBQ0EsWUFBQSxDQUNBLGtCQUFBLENBQ0EsbUJBQ0UsZUFBQSxDQUNBLHFCQUFBLENBQ0EsWUFBQSxDQUNBLGtCQUFBLENBQ0EsK0JBQUEsQ0FDQSwyQkFBQSxDQUNBLHdCQUFBLENBQ0Esd0JBQUEsQ0FDQSxjQUFBLENBQ0EsMkJBQUEsQ0FDQSw0QkFBQSxDQUNBLGtDQUFBLENBTUEsMEJBQ0UsaUJBQUEsQ0FDQSxXQUFBLENBQ0EsZUFBQSxDQUNBLGNBQUEsQ0FDQSxrQ0FBQSxDQUNBLFVBQUEsQ0FDQSxxQkFBQSxDQUNBLHdCQUFBLENBQ0EsZ0NBQ0Usd0JBQUEsQ0FJTixvQkFDRSxxQ0FBQSxDQUNBLGNBQUEsQ0FDQSxxQkFBQSxDQUNBLDJCQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0EsWUFBQSxDQUNBLFFBQUEsQ0FDQSxXQUFBLENBQ0EsV0FBQSxDQUNBLHdCQUFBLENBQ0EsOEJBQUEsQ0FDQSwrREFFRSxlQUFBLENBQ0EscUVBQ0Usa0JBQUEsQ0FFRixtR0FDRSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxXQUFBLENBQ0EsVUFBQSxDQUNBLGNBQUEsQ0FDQSxxQ0FBQSxDQUNBLGVBQUEsQ0FDQSxhQUFBLENBQ0EsaUJBQUEsQ0FDQSxrQkFBQSxDQUNBLG1CQUFBLENBQ0Esd0JBQUEsQ0FFRix5RkFDRSx3QkFBQSxDQUVBLHFHQUNFLGtC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LGNBQUEsQ0FDQSx3QkFBQSxDQUNBLHFCQUFBLENBS1IsNkJBQ0UsVUFBQSxDQUNBLGlCQUFBLENBQ0EsVUFBQSxDQUNBLFNBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxZQUFBLENBQ0Esd0JBQUEsQ0FDQSxrQkFBQSxDQUNBLHNCQUFBLENBQ0Esa0JBQUEsQ0FDQSxVQUFBLENBQ0EsdUNBQ0UsWUFBQSxDQUNBLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSxrQkFBQSxDQUNBLFVBQUEsQ0FDQSxvQkFBQSxDQUNBLGNBQUEsQ0FNQSwyQkFBQSxDQUNBLHFHQUVFLGtCQUFBLENBQ0EsaUJBQUEsQ0FHSiw0Q0FDRSxZQUFBLENBQ0EsZUFBQSxDQUNBLHFHQUVFLGlCQUFBLENBQ0EsaUJBQUEsQ0FDQSxXQUFBLENBQ0EsY0FBQSxDQUNBLGlCQUFBLENBQ0EsMkJBQUEsQ0FFQSxpSEFDRSxjQUFBLENBQ0Esd0JBQUEsQ0FDQSxxQkFBQSxDQUtSLGtDQUNFLFVBQUEsQ0FDQSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxVQUFBLENBQ0EsU0FBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLGNBQUEsQ0FDQSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxxQkFBQSxDQUNBLGtDQUFBLENBQ0Esd0JBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0EsVUFBQSxDQUNFLDBHQUNFLGlCQUFBLENBQ0EscUJBQUEsQ0FDQSxpQkFBQSxDQUNBLGNBQUEsQ0FDQSw2QkFBQSxDQUVGLHNDQUNFLGNBQUEsQ0FDQSw2QkFBQSxDQUVGLGtEQUNFLGtDQUFBLENBQ0EsY0FBQSxDQUVGLDZNQUlFLGdCQUFBLENBQ0EsY0FBQSxDQUtWLGFBQ0Usd0JBQUEsQ0FDQSxrQkFBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsYUFBQSxDQUNBLHlCQUFBLENBQ0EsaUJBQUEsQ0FDQSxjQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKFxcXCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUNhYmluK1NrZXRjaCZmYW1pbHk9RGVra28mZmFtaWx5PVF1aWNrc2FuZCZmYW1pbHk9Um9ib3RvOndnaHRAMzAwJmZhbWlseT1TbmlnbGV0JmZhbWlseT1XYWx0ZXIrVHVybmNvYXQmZGlzcGxheT1zd2FwXFxcIik7XFxuYm9keSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsIDMzLCA1OCk7XFxuXFxuICBidXR0b246aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxuICAjY2FyZCB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDlmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyZnIgNGZyO1xcbiAgICBtYXJnaW4tdG9wOiAxMDBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYWxpY2VibHVlO1xcbiAgICBoZWlnaHQ6IDcwMHB4O1xcbiAgICB3aWR0aDogMTIwMHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAjaGVhZGVyIHtcXG4gICAgICBncmlkLWNvbHVtbjogMS8zO1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2IoNDMsIDY1LCAyMDcpO1xcbiAgICAgIHBhZGRpbmc6IDE1cHggMzBweCAxMHB4IDMwcHg7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNzAsIDE2OSwgMjU1KTtcXG4gICAgICBmb250LXNpemU6IDM1cHg7XFxuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMTBweDtcXG4gICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMTBweDtcXG4gICAgICBmb250LWZhbWlseTogXFxcIkNhYmluIFNrZXRjaFxcXCIsIGN1cnNpdmU7XFxuICAgICAgLy9mb250LWZhbWlseTogJ1F1aWNrc2FuZCcsIHNhbnMtc2VyaWY7XFxuICAgICAgLy9mb250LWZhbWlseTogJ1NuaWdsZXQnLCBjdXJzaXZlO1xcbiAgICAgIC8vZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xcbiAgICAgIC8vZm9udC1mYW1pbHk6ICdXYWx0ZXIgVHVybmNvYXQnLCBjdXJzaXZlO1xcbiAgICAgIC8vZm9udC1mYW1pbHk6ICdEZWtrbycsIGN1cnNpdmU7XFxuICAgICAgYnV0dG9uIHtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgICAgIGhlaWdodDogMjVweDtcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICAgICAgICBmb250LXNpemU6IDE1cHg7XFxuICAgICAgICBmb250LWZhbWlseTogXFxcIlF1aWNrc2FuZFxcXCIsIHNhbnMtc2VyaWY7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMDcsIDE4NCwgMjUxKTtcXG4gICAgICAgICY6aG92ZXIge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoOTEsIDE3NSwgMjQ5KTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgI3NpZGViYXIge1xcbiAgICAgIGZvbnQtZmFtaWx5OiBcXFwiV2FsdGVyIFR1cm5jb2F0XFxcIiwgY3Vyc2l2ZTtcXG4gICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICBwYWRkaW5nOiAxMHB4IDEwcHggMTBweCAyMHB4O1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICBncmlkLXJvdzogMi8zO1xcbiAgICAgIG1hcmdpbjogMDtcXG4gICAgICB3aWR0aDogMjM1cHg7XFxuICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDcsIDI1MywgMjE3KTtcXG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAxMHB4O1xcbiAgICAgICNwcm9qZWN0TGlzdCxcXG4gICAgICAjbm90ZUxpc3Qge1xcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcXG4gICAgICAgIGxpIHtcXG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgIH1cXG4gICAgICAgICNhZGRQcm9qZWN0QnV0dG9uIHtcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgICAgaGVpZ2h0OiAyNXB4O1xcbiAgICAgICAgICB3aWR0aDogMjVweDtcXG4gICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgICBmb250LWZhbWlseTogXFxcIldhbHRlciBUdXJuY29hdFxcXCIsIGN1cnNpdmU7XFxuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICAgICAgICAgIGNvbG9yOiByZ2IoNjMsIDM5LCAxMik7XFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgICAgICAgYm9yZGVyOiByZ2IoMTcwLCAxNjcsIDgzKSAycHg7XFxuICAgICAgICAgIGJvcmRlci1zdHlsZTogZGFzaGVkO1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTEsIDIzNyk7XFxuICAgICAgICB9XFxuICAgICAgICAjbmV3Rm9sZGVyTEkge1xcbiAgICAgICAgICBtYXJnaW46IDEwcHggMCAxMHB4IC01MHB4O1xcblxcbiAgICAgICAgICBpbnB1dCB7XFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gICAgICAgICAgICBoZWlnaHQ6IDIwcHg7XFxuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFJvYm90bywgc2Fucy1zZXJpZjtcXG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgI25ld0ZvbGRlckJ1dHRvbnMge1xcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAtMjBweDtcXG4gICAgICAgICAgICBidXR0b24ge1xcbiAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogcmdiKDU1LCAxOTQsIDI1Myk7XFxuICAgICAgICAgICAgICBmb250LWZhbWlseTogXFxcIlNuaWdsZXRcXFwiLCBjdXJzaXZlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICAucHJvamVjdEZvbGRlcixcXG4gICAgICAubm90ZUZvbGRlciB7XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgICAmOmhvdmVyIHtcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICAjbmV3Rm9sZGVyQm94IHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgI25ld0ZvbGRlckJ1dHRvbnMge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBjb2x1bW4tZ2FwOiAxNXB4O1xcbiAgICAgICAgICBtYXJnaW46IDVweDtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgI2NvbnRlbnQtY2FyZCB7XFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsIDE1LCA1MSk7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIGdyaWQtY29sdW1uOiAyLzM7XFxuICAgICAgcGFkZGluZzogMXB4IDAgMCAxcHg7XFxuICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDEwcHg7XFxuICAgICAgI2NvbnRlbnQtY2FyZC1idXR0b25zIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICAgICAgcGFkZGluZzogNXB4IDMwcHggNXB4IDA7XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgY29sdW1uLWdhcDogMzBweDtcXG4gICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDQwLCAyMDEsIDI0OSk7XFxuICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7XFxuICAgICAgICBmb250LWZhbWlseTogXFxcIkNhYmluIFNrZXRjaFxcXCIsIGN1cnNpdmU7XFxuICAgICAgICBidXR0b24ge1xcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsdWU7XFxuICAgICAgICAgIGZvbnQtZmFtaWx5OiBcXFwiQ2FiaW4gU2tldGNoXFxcIiwgY3Vyc2l2ZTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gICAgI2NvbnRlbnQge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMDcsIDI0NiwgMjUyKTtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgIHBhZGRpbmc6IDVweDtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICNjdXJyZW50Rm9sZGVyRGlzcGxheSB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgICAgY29sdW1uLWdhcDogMTBweDtcXG4gICAgICAgIHBhZGRpbmc6IDEycHg7XFxuICAgICAgICBmb250LWZhbWlseTogXFxcIkNhYmluIFNrZXRjaFxcXCIsIGN1cnNpdmU7XFxuICAgICAgICBmb250LXNpemU6IDI1cHg7XFxuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggZGFzaGVkIGJsYWNrO1xcbiAgICAgICAgXFxuICAgICAgICAjZm9sZGVyRGVzdHJveWVyLCAjZm9sZGVyRWRpdG9ye1xcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyAgICAgICBcXG4gICAgICAgICAgZm9udC1mYW1pbHk6IFxcXCJDYWJpbiBTa2V0Y2hcXFwiLCBjdXJzaXZlO1xcbiAgICAgICAgICBwYWRkaW5nOiA0cHg7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgICNjb250ZW50Qm9keSB7XFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnIgMWZyO1xcbiAgICAgICAgb3ZlcmZsb3cteTogYXV0bztcXG4gICAgICAgIHdpZHRoOiAxMDAwcHg7XFxuICAgICAgICBoZWlnaHQ6IDU4MHB4O1xcbiAgICAgICAgcm93LWdhcDogNXB4O1xcbiAgICAgIH1cXG4gICAgICAudG9Eb05vdGUge1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgICAgICAgd2lkdGg6IDIwMHB4O1xcbiAgICAgICAgaGVpZ2h0OiAyMDBweDtcXG4gICAgICAgIHBhZGRpbmc6IDVweDtcXG4gICAgICAgIGZvbnQtZmFtaWx5OiAnV2FsdGVyIFR1cm5jb2F0JywgY3Vyc2l2ZTtcXG4gICAgICAgIHJlc2l6ZTogYm90aDtcXG4gICAgICAgIC5yZW1vdmVOb3RlQnV0dG9ue1xcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICByaWdodDogMXB4O1xcbiAgICAgICAgICB0b3A6IDFweDtcXG4gICAgICAgICAgaGVpZ2h0OiAxNXB4O1xcbiAgICAgICAgICBmb250LXNpemU6IDEwcHg7XFxuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgICAgZm9udC1mYW1pbHk6IFxcXCJDYWJpbiBTa2V0Y2hcXFwiLCBjdXJzaXZlO1xcbiAgICAgICAgICAmOmhvdmVye1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6cmdiKDE5NywgMTk3LCAxOTcpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgIC50b0RvUHJvaiB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMSwgMjQ5LCAyNTEpO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgICAgIGZvbnQtZmFtaWx5OiBcXFwiUXVpY2tzYW5kXFxcIiwgc2Fucy1zZXJpZjtcXG5cXG4gICAgICAgICNsZWZ0c2lkZVByb2oge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcbiAgICAgICAgfVxcbiAgICAgICAgI3JpZ2h0c2lkZVByb2oge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBjb2x1bW4tZ2FwOiAxMHB4O1xcbiAgICAgICAgICBidXR0b24ge1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMCwgMCwgMCk7XFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyNiwgMjQ4LCAyNTMpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgICNlZGl0Rm9sZGVyRm9ybXtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgbGVmdDogMzUwcHg7XFxuICAgICAgICB0b3A6IDE3MHB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEwNywgMTg0LCAyNTEpO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIHotaW5kZXg6IC0xO1xcbiAgICAgICAgcm93LWdhcDogOHB4O1xcbiAgICAgICAgZm9udC1mYW1pbHk6ICdDYWJpbiBTa2V0Y2gnLCBjdXJzaXZlO1xcbiAgICAgICAgICBpbnB1dHtcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgICAgICB9XFxuICAgICAgICBidXR0b257XFxuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xcbiAgICAgICAgICBmb250LWZhbWlseTogJ1dhbHRlciBUdXJuY29hdCcsIGN1cnNpdmU7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgICNmb3JtQm94IHtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgbGVmdDogMjAwcHg7XFxuICAgICAgICB0b3A6IDE3MHB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEwNywgMTg0LCAyNTEpO1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIHotaW5kZXg6IC0xO1xcbiAgICAgICAgI2Zvcm1Cb3R0b20ge1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgICAgI3ByaW9yaXR5IHtcXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgICNtb2RhbEZvcm0ge1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgICAgei1pbmRleDogLTE7XFxuICAgICAgICAgIG1hcmdpbjogMCA1cHggNXB4IDVweDtcXG4gICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgICAvL2ZvbnQtZmFtaWx5OiAnQ2FiaW4gU2tldGNoJywgY3Vyc2l2ZTtcXG4gICAgICAgICAgLy9mb250LWZhbWlseTogJ1F1aWNrc2FuZCcsIHNhbnMtc2VyaWY7XFxuICAgICAgICAgIC8vZm9udC1mYW1pbHk6ICdTbmlnbGV0JywgY3Vyc2l2ZTtcXG4gICAgICAgICAgLy9mb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxuICAgICAgICAgIC8vZm9udC1mYW1pbHk6ICdXYWx0ZXIgVHVybmNvYXQnLCBjdXJzaXZlO1xcbiAgICAgICAgICBmb250LWZhbWlseTogXFxcIkRla2tvXFxcIiwgY3Vyc2l2ZTtcXG4gICAgICAgICAgaW5wdXQsXFxuICAgICAgICAgICNwcm9qZWN0RGVzY3JpcHRpb24ge1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBub25lO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICAjYnV0dG9uRm9ybUJveCB7XFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIGNvbHVtbi1nYXA6IDI1cHg7XFxuICAgICAgICAgIGJ1dHRvbixcXG4gICAgICAgICAgaW5wdXQge1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgICAgICAgICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICAgICAgICAgICAgaGVpZ2h0OiAyMHB4O1xcbiAgICAgICAgICAgIG1pbi13aWR0aDogMjVweDtcXG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgICAgZm9udC1mYW1pbHk6IFxcXCJEZWtrb1xcXCIsIGN1cnNpdmU7XFxuICAgICAgICAgICAgJjpob3ZlciB7XFxuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjE2LCAyMzcsIDI1NSk7XFxuICAgICAgICAgICAgICBib3JkZXI6IGJsdWUgMXB4IHNvbGlkO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICAjbm90ZUJveCB7XFxuICAgICAgICBvcGFjaXR5OiAwJTtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIGxlZnQ6IDIwMHB4O1xcbiAgICAgICAgdG9wOiAxNzBweDtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMDcsIDE4NCwgMjUxKTtcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICB6LWluZGV4OiAtMTtcXG4gICAgICAgICNub3RlRm9ybSB7XFxuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICB6LWluZGV4OiAtMTtcXG4gICAgICAgICAgbWFyZ2luOiAwIDVweCA1cHggNXB4O1xcbiAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICAgIC8vZm9udC1mYW1pbHk6ICdDYWJpbiBTa2V0Y2gnLCBjdXJzaXZlO1xcbiAgICAgICAgICAvL2ZvbnQtZmFtaWx5OiAnUXVpY2tzYW5kJywgc2Fucy1zZXJpZjtcXG4gICAgICAgICAgLy9mb250LWZhbWlseTogJ1NuaWdsZXQnLCBjdXJzaXZlO1xcbiAgICAgICAgICAvL2ZvbnQtZmFtaWx5OiAnUm9ib3RvJywgc2Fucy1zZXJpZjtcXG4gICAgICAgICAgLy9mb250LWZhbWlseTogJ1dhbHRlciBUdXJuY29hdCcsIGN1cnNpdmU7XFxuICAgICAgICAgIGZvbnQtZmFtaWx5OiBcXFwiRGVra29cXFwiLCBjdXJzaXZlO1xcbiAgICAgICAgICBpbnB1dCxcXG4gICAgICAgICAgI25vdGVEZXNjcmlwdGlvbiB7XFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAgICAgICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgICNidXR0b25Gb3JtQm94IHtcXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgY29sdW1uLWdhcDogMjVweDtcXG4gICAgICAgICAgYnV0dG9uLFxcbiAgICAgICAgICBpbnB1dCB7XFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICAgICAgICAgIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gICAgICAgICAgICBoZWlnaHQ6IDIwcHg7XFxuICAgICAgICAgICAgbWluLXdpZHRoOiAyNXB4O1xcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgICBmb250LWZhbWlseTogXFxcIkRla2tvXFxcIiwgY3Vyc2l2ZTtcXG4gICAgICAgICAgICAvL3BhZGRpbmctYm90dG9tOiA1cHg7XFxuICAgICAgICAgICAgJjpob3ZlciB7XFxuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjE2LCAyMzcsIDI1NSk7XFxuICAgICAgICAgICAgICBib3JkZXI6IGJsdWUgMXB4IHNvbGlkO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICAjbW9kYWxEZXRhaWxzIHtcXG4gICAgICAgIG9wYWNpdHk6IDAlO1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgICAgbGVmdDogMjcwcHg7XFxuICAgICAgICB0b3A6IDE3MHB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICBwYWRkaW5nOiAxNXB4O1xcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgICAgICAgZm9udC1mYW1pbHk6IFxcXCJRdWlja3NhbmRcXFwiLCBzYW5zLXNlcmlmO1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEyMSwgMTkyLCAyNTUpO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgei1pbmRleDogLTE7XFxuICAgICAgICAgICNlZGl0TW9kYWxEZXRhaWxzLCAjY2FuY2VsTW9kYWxEZXRhaWxze1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnU25pZ2xldCcsIGN1cnNpdmU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgZGl2e1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjVweDtcXG4gICAgICAgICAgICBmb250LWZhbWlseTogJ1NuaWdsZXQnLCBjdXJzaXZlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgICNtb2RhbFRpdGxlRGF0YXtcXG4gICAgICAgICAgICBmb250LWZhbWlseTogXFxcIkNhYmluIFNrZXRjaFxcXCIsIGN1cnNpdmU7XFxuICAgICAgICAgICAgZm9udC1zaXplOiA0MHB4O1xcbiAgICAgICAgfVxcbiAgICAgICAgICAjbW9kYWxGb2xkZXJEYXRhLFxcbiAgICAgICAgICAjbW9kYWxQcmlvcml0eURhdGEsXFxuICAgICAgICAgICNtb2RhbERhdGVEYXRhLFxcbiAgICAgICAgICAjbW9kYWxEZXRhaWxzRGF0YSB7XFxuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbiAgI2Zvb3RlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGFsaWNlYmx1ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcXG4gICAgYm90dG9tOiAwcHg7XFxuICAgIG9wYWNpdHk6IDY1JTtcXG4gICAgY29sb3I6IHJnYigxMDcsIDE4NCwgMjUxKTtcXG4gICAgcGFkZGluZzogNXB4IDIwcHggNXB4IDIwcHg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7XG5cbiAgLy8gQ2xvbmUgdGhlIGRhdGVcbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGNvbXBhcmVBc2NcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29tcGFyZSB0aGUgdHdvIGRhdGVzIGFuZCByZXR1cm4gLTEsIDAgb3IgMS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIDEgaWYgdGhlIGZpcnN0IGRhdGUgaXMgYWZ0ZXIgdGhlIHNlY29uZCxcbiAqIC0xIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGJlZm9yZSB0aGUgc2Vjb25kIG9yIDAgaWYgZGF0ZXMgYXJlIGVxdWFsLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY29tcGFyZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb25cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tcGFyZSAxMSBGZWJydWFyeSAxOTg3IGFuZCAxMCBKdWx5IDE5ODk6XG4gKiBjb25zdCByZXN1bHQgPSBjb21wYXJlQXNjKG5ldyBEYXRlKDE5ODcsIDEsIDExKSwgbmV3IERhdGUoMTk4OSwgNiwgMTApKVxuICogLy89PiAtMVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTb3J0IHRoZSBhcnJheSBvZiBkYXRlczpcbiAqIGNvbnN0IHJlc3VsdCA9IFtcbiAqICAgbmV3IERhdGUoMTk5NSwgNiwgMiksXG4gKiAgIG5ldyBEYXRlKDE5ODcsIDEsIDExKSxcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiBdLnNvcnQoY29tcGFyZUFzYylcbiAqIC8vPT4gW1xuICogLy8gICBXZWQgRmViIDExIDE5ODcgMDA6MDA6MDAsXG4gKiAvLyAgIE1vbiBKdWwgMTAgMTk4OSAwMDowMDowMCxcbiAqIC8vICAgU3VuIEp1bCAwMiAxOTk1IDAwOjAwOjAwXG4gKiAvLyBdXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBhcmVBc2MoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciBkaWZmID0gZGF0ZUxlZnQuZ2V0VGltZSgpIC0gZGF0ZVJpZ2h0LmdldFRpbWUoKTtcbiAgaWYgKGRpZmYgPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgcmV0dXJuIDE7XG4gICAgLy8gUmV0dXJuIDAgaWYgZGlmZiBpcyAwOyByZXR1cm4gTmFOIGlmIGRpZmYgaXMgTmFOXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRpZmY7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMvaW5kZXguanNcIjtcbmltcG9ydCBjb21wYXJlQXNjIGZyb20gXCIuLi9jb21wYXJlQXNjL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IGlzTGFzdERheU9mTW9udGggZnJvbSBcIi4uL2lzTGFzdERheU9mTW9udGgvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluTW9udGhzXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgZnVsbCBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBmdWxsIG1vbnRocyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyB1c2luZyB0cnVuYyBhcyBhIGRlZmF1bHQgcm91bmRpbmcgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgZnVsbCBtb250aHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgZnVsbCBtb250aHMgYXJlIGJldHdlZW4gMzEgSmFudWFyeSAyMDE0IGFuZCAxIFNlcHRlbWJlciAyMDE0P1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluTW9udGhzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCBuZXcgRGF0ZSgyMDE0LCAwLCAzMSkpXG4gKiAvLz0+IDdcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluTW9udGhzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgc2lnbiA9IGNvbXBhcmVBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XG4gIHZhciBkaWZmZXJlbmNlID0gTWF0aC5hYnMoZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkpO1xuICB2YXIgcmVzdWx0O1xuXG4gIC8vIENoZWNrIGZvciB0aGUgZGlmZmVyZW5jZSBvZiBsZXNzIHRoYW4gbW9udGhcbiAgaWYgKGRpZmZlcmVuY2UgPCAxKSB7XG4gICAgcmVzdWx0ID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZGF0ZUxlZnQuZ2V0TW9udGgoKSA9PT0gMSAmJiBkYXRlTGVmdC5nZXREYXRlKCkgPiAyNykge1xuICAgICAgLy8gVGhpcyB3aWxsIGNoZWNrIGlmIHRoZSBkYXRlIGlzIGVuZCBvZiBGZWIgYW5kIGFzc2lnbiBhIGhpZ2hlciBlbmQgb2YgbW9udGggZGF0ZVxuICAgICAgLy8gdG8gY29tcGFyZSBpdCB3aXRoIEphblxuICAgICAgZGF0ZUxlZnQuc2V0RGF0ZSgzMCk7XG4gICAgfVxuICAgIGRhdGVMZWZ0LnNldE1vbnRoKGRhdGVMZWZ0LmdldE1vbnRoKCkgLSBzaWduICogZGlmZmVyZW5jZSk7XG5cbiAgICAvLyBNYXRoLmFicyhkaWZmIGluIGZ1bGwgbW9udGhzIC0gZGlmZiBpbiBjYWxlbmRhciBtb250aHMpID09PSAxIGlmIGxhc3QgY2FsZW5kYXIgbW9udGggaXMgbm90IGZ1bGxcbiAgICAvLyBJZiBzbywgcmVzdWx0IG11c3QgYmUgZGVjcmVhc2VkIGJ5IDEgaW4gYWJzb2x1dGUgdmFsdWVcbiAgICB2YXIgaXNMYXN0TW9udGhOb3RGdWxsID0gY29tcGFyZUFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSA9PT0gLXNpZ247XG5cbiAgICAvLyBDaGVjayBmb3IgY2FzZXMgb2Ygb25lIGZ1bGwgY2FsZW5kYXIgbW9udGhcbiAgICBpZiAoaXNMYXN0RGF5T2ZNb250aCh0b0RhdGUoZGlydHlEYXRlTGVmdCkpICYmIGRpZmZlcmVuY2UgPT09IDEgJiYgY29tcGFyZUFzYyhkaXJ0eURhdGVMZWZ0LCBkYXRlUmlnaHQpID09PSAxKSB7XG4gICAgICBpc0xhc3RNb250aE5vdEZ1bGwgPSBmYWxzZTtcbiAgICB9XG4gICAgcmVzdWx0ID0gc2lnbiAqIChkaWZmZXJlbmNlIC0gTnVtYmVyKGlzTGFzdE1vbnRoTm90RnVsbCkpO1xuICB9XG5cbiAgLy8gUHJldmVudCBuZWdhdGl2ZSB6ZXJvXG4gIHJldHVybiByZXN1bHQgPT09IDAgPyAwIDogcmVzdWx0O1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHNcbiAqIEBjYXRlZ29yeSBNb250aCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBjYWxlbmRhciBtb250aHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgbW9udGhzIGFyZSBiZXR3ZWVuIDMxIEphbnVhcnkgMjAxNCBhbmQgMSBTZXB0ZW1iZXIgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA4LCAxKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgMCwgMzEpXG4gKiApXG4gKiAvLz0+IDhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciB5ZWFyRGlmZiA9IGRhdGVMZWZ0LmdldEZ1bGxZZWFyKCkgLSBkYXRlUmlnaHQuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIG1vbnRoRGlmZiA9IGRhdGVMZWZ0LmdldE1vbnRoKCkgLSBkYXRlUmlnaHQuZ2V0TW9udGgoKTtcbiAgcmV0dXJuIHllYXJEaWZmICogMTIgKyBtb250aERpZmY7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZW5kT2ZEYXkgZnJvbSBcIi4uL2VuZE9mRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgZW5kT2ZNb250aCBmcm9tIFwiLi4vZW5kT2ZNb250aC9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNMYXN0RGF5T2ZNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgdGhlIGxhc3QgZGF5IG9mIGEgbW9udGg/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdGhlIGxhc3QgZGF5IG9mIGEgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJcyAyOCBGZWJydWFyeSAyMDE0IHRoZSBsYXN0IGRheSBvZiBhIG1vbnRoP1xuICogY29uc3QgcmVzdWx0ID0gaXNMYXN0RGF5T2ZNb250aChuZXcgRGF0ZSgyMDE0LCAxLCAyOCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMYXN0RGF5T2ZNb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiBlbmRPZkRheShkYXRlKS5nZXRUaW1lKCkgPT09IGVuZE9mTW9udGgoZGF0ZSkuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZW5kT2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZW5kIG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGVuZCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAyMzo1OTo1OS45OTlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW5kT2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZW5kT2ZNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgZW5kIG9mIGEgbW9udGggZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSBtb250aCBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSBtb250aCBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAzMCAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmRPZk1vbnRoKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSwgbW9udGggKyAxLCAwKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJ2YXIgcm91bmRpbmdNYXAgPSB7XG4gIGNlaWw6IE1hdGguY2VpbCxcbiAgcm91bmQ6IE1hdGgucm91bmQsXG4gIGZsb29yOiBNYXRoLmZsb29yLFxuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmModmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPCAwID8gTWF0aC5jZWlsKHZhbHVlKSA6IE1hdGguZmxvb3IodmFsdWUpO1xuICB9IC8vIE1hdGgudHJ1bmMgaXMgbm90IHN1cHBvcnRlZCBieSBJRVxufTtcblxudmFyIGRlZmF1bHRSb3VuZGluZ01ldGhvZCA9ICd0cnVuYyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Um91bmRpbmdNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiBtZXRob2QgPyByb3VuZGluZ01hcFttZXRob2RdIDogcm91bmRpbmdNYXBbZGVmYXVsdFJvdW5kaW5nTWV0aG9kXTtcbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07XG5cbi8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwIC8qIFN1bmRheSAqLyxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIG9iamVjdCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhc3NpZ24gcmVxdWlyZXMgdGhhdCBpbnB1dCBwYXJhbWV0ZXIgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgO1xuICAgICAgdGFyZ2V0W3Byb3BlcnR5XSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGNvbXBhcmVBc2MgZnJvbSBcIi4uL2NvbXBhcmVBc2MvaW5kZXguanNcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5Nb250aHMgZnJvbSBcIi4uL2RpZmZlcmVuY2VJbk1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJblNlY29uZHMgZnJvbSBcIi4uL2RpZmZlcmVuY2VJblNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGNsb25lT2JqZWN0IGZyb20gXCIuLi9fbGliL2Nsb25lT2JqZWN0L2luZGV4LmpzXCI7XG5pbXBvcnQgYXNzaWduIGZyb20gXCIuLi9fbGliL2Fzc2lnbi9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSU5VVEVTX0lOX0RBWSA9IDE0NDA7XG52YXIgTUlOVVRFU19JTl9BTE1PU1RfVFdPX0RBWVMgPSAyNTIwO1xudmFyIE1JTlVURVNfSU5fTU9OVEggPSA0MzIwMDtcbnZhciBNSU5VVEVTX0lOX1RXT19NT05USFMgPSA4NjQwMDtcblxuLyoqXG4gKiBAbmFtZSBmb3JtYXREaXN0YW5jZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzIGluIHdvcmRzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcyBpbiB3b3Jkcy5cbiAqXG4gKiB8IERpc3RhbmNlIGJldHdlZW4gZGF0ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUmVzdWx0ICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgLi4uIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbGVzcyB0aGFuIGEgbWludXRlICB8XG4gKiB8IDMwIHNlY3MgLi4uIDEgbWluIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMSBtaW51dGUgICAgICAgICAgICB8XG4gKiB8IDEgbWluIDMwIHNlY3MgLi4uIDQ0IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjQ0XSBtaW51dGVzICAgICB8XG4gKiB8IDQ0IG1pbnMgLi4uIDMwIHNlY3MgLi4uIDg5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSBob3VyICAgICAgICB8XG4gKiB8IDg5IG1pbnMgMzAgc2VjcyAuLi4gMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgWzIuLjI0XSBob3VycyB8XG4gKiB8IDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgIHwgMSBkYXkgICAgICAgICAgICAgICB8XG4gKiB8IDQxIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAgICAgICAgIHwgWzIuLjMwXSBkYXlzICAgICAgICB8XG4gKiB8IDI5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNDQgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMSBtb250aCAgICAgICB8XG4gKiB8IDQ0IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gNTkgZGF5cyAyMyBocnMgNTkgbWlucyAzMCBzZWNzIHwgYWJvdXQgMiBtb250aHMgICAgICB8XG4gKiB8IDU5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyAuLi4gMSB5ciAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWzIuLjEyXSBtb250aHMgICAgICB8XG4gKiB8IDEgeXIgLi4uIDEgeXIgMyBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgMSB5ZWFyICAgICAgICB8XG4gKiB8IDEgeXIgMyBtb250aHMgLi4uIDEgeXIgOSBtb250aCBzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciAxIHllYXIgICAgICAgICB8XG4gKiB8IDEgeXIgOSBtb250aHMgLi4uIDIgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IDIgeWVhcnMgICAgICB8XG4gKiB8IE4geXJzIC4uLiBOIHlycyAzIG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWJvdXQgTiB5ZWFycyAgICAgICB8XG4gKiB8IE4geXJzIDMgbW9udGhzIC4uLiBOIHlycyA5IG1vbnRocyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgb3ZlciBOIHllYXJzICAgICAgICB8XG4gKiB8IE4geXJzIDkgbW9udGhzIC4uLiBOKzEgeXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWxtb3N0IE4rMSB5ZWFycyAgICB8XG4gKlxuICogV2l0aCBgb3B0aW9ucy5pbmNsdWRlU2Vjb25kcyA9PSB0cnVlYDpcbiAqIHwgRGlzdGFuY2UgYmV0d2VlbiBkYXRlcyB8IFJlc3VsdCAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgMCBzZWNzIC4uLiA1IHNlY3MgICAgICB8IGxlc3MgdGhhbiA1IHNlY29uZHMgIHxcbiAqIHwgNSBzZWNzIC4uLiAxMCBzZWNzICAgICB8IGxlc3MgdGhhbiAxMCBzZWNvbmRzIHxcbiAqIHwgMTAgc2VjcyAuLi4gMjAgc2VjcyAgICB8IGxlc3MgdGhhbiAyMCBzZWNvbmRzIHxcbiAqIHwgMjAgc2VjcyAuLi4gNDAgc2VjcyAgICB8IGhhbGYgYSBtaW51dGUgICAgICAgIHxcbiAqIHwgNDAgc2VjcyAuLi4gNjAgc2VjcyAgICB8IGxlc3MgdGhhbiBhIG1pbnV0ZSAgIHxcbiAqIHwgNjAgc2VjcyAuLi4gOTAgc2VjcyAgICB8IDEgbWludXRlICAgICAgICAgICAgIHxcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGJhc2VEYXRlIC0gdGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuaW5jbHVkZVNlY29uZHM9ZmFsc2VdIC0gZGlzdGFuY2VzIGxlc3MgdGhhbiBhIG1pbnV0ZSBhcmUgbW9yZSBkZXRhaWxlZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5hZGRTdWZmaXg9ZmFsc2VdIC0gcmVzdWx0IGluZGljYXRlcyBpZiB0aGUgc2Vjb25kIGRhdGUgaXMgZWFybGllciBvciBsYXRlciB0aGFuIHRoZSBmaXJzdFxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZGlzdGFuY2UgaW4gd29yZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBiYXNlRGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0RGlzdGFuY2VgIHByb3BlcnR5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMiBKdWx5IDIwMTQgYW5kIDEgSmFudWFyeSAyMDE1P1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2UobmV3IERhdGUoMjAxNCwgNiwgMiksIG5ldyBEYXRlKDIwMTUsIDAsIDEpKVxuICogLy89PiAnNiBtb250aHMnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoYXQgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMSBKYW51YXJ5IDIwMTUgMDA6MDA6MTVcbiAqIC8vIGFuZCAxIEphbnVhcnkgMjAxNSAwMDowMDowMCwgaW5jbHVkaW5nIHNlY29uZHM/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShcbiAqICAgbmV3IERhdGUoMjAxNSwgMCwgMSwgMCwgMCwgMTUpLFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAwKSxcbiAqICAgeyBpbmNsdWRlU2Vjb25kczogdHJ1ZSB9XG4gKiApXG4gKiAvLz0+ICdsZXNzIHRoYW4gMjAgc2Vjb25kcydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgZnJvbSAxIEphbnVhcnkgMjAxNlxuICogLy8gdG8gMSBKYW51YXJ5IDIwMTUsIHdpdGggYSBzdWZmaXg/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZShuZXcgRGF0ZSgyMDE1LCAwLCAxKSwgbmV3IERhdGUoMjAxNiwgMCwgMSksIHtcbiAqICAgYWRkU3VmZml4OiB0cnVlXG4gKiB9KVxuICogLy89PiAnYWJvdXQgMSB5ZWFyIGFnbydcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hhdCBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAxIEF1Z3VzdCAyMDE2IGFuZCAxIEphbnVhcnkgMjAxNSBpbiBFc3BlcmFudG8/XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlKG5ldyBEYXRlKDIwMTYsIDcsIDEpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAncGxpIG9sIDEgamFybydcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZShkaXJ0eURhdGUsIGRpcnR5QmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZTtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIGlmICghbG9jYWxlLmZvcm1hdERpc3RhbmNlKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0RGlzdGFuY2UgcHJvcGVydHknKTtcbiAgfVxuICB2YXIgY29tcGFyaXNvbiA9IGNvbXBhcmVBc2MoZGlydHlEYXRlLCBkaXJ0eUJhc2VEYXRlKTtcbiAgaWYgKGlzTmFOKGNvbXBhcmlzb24pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG4gIHZhciBsb2NhbGl6ZU9wdGlvbnMgPSBhc3NpZ24oY2xvbmVPYmplY3Qob3B0aW9ucyksIHtcbiAgICBhZGRTdWZmaXg6IEJvb2xlYW4ob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFkZFN1ZmZpeCksXG4gICAgY29tcGFyaXNvbjogY29tcGFyaXNvblxuICB9KTtcbiAgdmFyIGRhdGVMZWZ0O1xuICB2YXIgZGF0ZVJpZ2h0O1xuICBpZiAoY29tcGFyaXNvbiA+IDApIHtcbiAgICBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eUJhc2VEYXRlKTtcbiAgICBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRlTGVmdCA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICAgIGRhdGVSaWdodCA9IHRvRGF0ZShkaXJ0eUJhc2VEYXRlKTtcbiAgfVxuICB2YXIgc2Vjb25kcyA9IGRpZmZlcmVuY2VJblNlY29uZHMoZGF0ZVJpZ2h0LCBkYXRlTGVmdCk7XG4gIHZhciBvZmZzZXRJblNlY29uZHMgPSAoZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlUmlnaHQpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlTGVmdCkpIC8gMTAwMDtcbiAgdmFyIG1pbnV0ZXMgPSBNYXRoLnJvdW5kKChzZWNvbmRzIC0gb2Zmc2V0SW5TZWNvbmRzKSAvIDYwKTtcbiAgdmFyIG1vbnRocztcblxuICAvLyAwIHVwIHRvIDIgbWluc1xuICBpZiAobWludXRlcyA8IDIpIHtcbiAgICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5pbmNsdWRlU2Vjb25kcykge1xuICAgICAgaWYgKHNlY29uZHMgPCA1KSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWFNlY29uZHMnLCA1LCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgMTApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YU2Vjb25kcycsIDEwLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgMjApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YU2Vjb25kcycsIDIwLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNDApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnaGFsZkFNaW51dGUnLCAwLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChzZWNvbmRzIDwgNjApIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnbGVzc1RoYW5YTWludXRlcycsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCd4TWludXRlcycsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ2xlc3NUaGFuWE1pbnV0ZXMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneE1pbnV0ZXMnLCBtaW51dGVzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIDIgbWlucyB1cCB0byAwLjc1IGhyc1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCA0NSkge1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNaW51dGVzJywgbWludXRlcywgbG9jYWxpemVPcHRpb25zKTtcblxuICAgIC8vIDAuNzUgaHJzIHVwIHRvIDEuNSBocnNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgOTApIHtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhIb3VycycsIDEsIGxvY2FsaXplT3B0aW9ucyk7XG5cbiAgICAvLyAxLjUgaHJzIHVwIHRvIDI0IGhyc1xuICB9IGVsc2UgaWYgKG1pbnV0ZXMgPCBNSU5VVEVTX0lOX0RBWSkge1xuICAgIHZhciBob3VycyA9IE1hdGgucm91bmQobWludXRlcyAvIDYwKTtcbiAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhIb3VycycsIGhvdXJzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuXG4gICAgLy8gMSBkYXkgdXAgdG8gMS43NSBkYXlzXG4gIH0gZWxzZSBpZiAobWludXRlcyA8IE1JTlVURVNfSU5fQUxNT1NUX1RXT19EQVlTKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgneERheXMnLCAxLCBsb2NhbGl6ZU9wdGlvbnMpO1xuXG4gICAgLy8gMS43NSBkYXlzIHVwIHRvIDMwIGRheXNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9NT05USCkge1xuICAgIHZhciBkYXlzID0gTWF0aC5yb3VuZChtaW51dGVzIC8gTUlOVVRFU19JTl9EQVkpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hEYXlzJywgZGF5cywgbG9jYWxpemVPcHRpb25zKTtcblxuICAgIC8vIDEgbW9udGggdXAgdG8gMiBtb250aHNcbiAgfSBlbHNlIGlmIChtaW51dGVzIDwgTUlOVVRFU19JTl9UV09fTU9OVEhTKSB7XG4gICAgbW9udGhzID0gTWF0aC5yb3VuZChtaW51dGVzIC8gTUlOVVRFU19JTl9NT05USCk7XG4gICAgcmV0dXJuIGxvY2FsZS5mb3JtYXREaXN0YW5jZSgnYWJvdXRYTW9udGhzJywgbW9udGhzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuICB9XG4gIG1vbnRocyA9IGRpZmZlcmVuY2VJbk1vbnRocyhkYXRlUmlnaHQsIGRhdGVMZWZ0KTtcblxuICAvLyAyIG1vbnRocyB1cCB0byAxMiBtb250aHNcbiAgaWYgKG1vbnRocyA8IDEyKSB7XG4gICAgdmFyIG5lYXJlc3RNb250aCA9IE1hdGgucm91bmQobWludXRlcyAvIE1JTlVURVNfSU5fTU9OVEgpO1xuICAgIHJldHVybiBsb2NhbGUuZm9ybWF0RGlzdGFuY2UoJ3hNb250aHMnLCBuZWFyZXN0TW9udGgsIGxvY2FsaXplT3B0aW9ucyk7XG5cbiAgICAvLyAxIHllYXIgdXAgdG8gbWF4IERhdGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9udGhzU2luY2VTdGFydE9mWWVhciA9IG1vbnRocyAlIDEyO1xuICAgIHZhciB5ZWFycyA9IE1hdGguZmxvb3IobW9udGhzIC8gMTIpO1xuXG4gICAgLy8gTiB5ZWFycyB1cCB0byAxIHllYXJzIDMgbW9udGhzXG4gICAgaWYgKG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPCAzKSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhYm91dFhZZWFycycsIHllYXJzLCBsb2NhbGl6ZU9wdGlvbnMpO1xuXG4gICAgICAvLyBOIHllYXJzIDMgbW9udGhzIHVwIHRvIE4geWVhcnMgOSBtb250aHNcbiAgICB9IGVsc2UgaWYgKG1vbnRoc1NpbmNlU3RhcnRPZlllYXIgPCA5KSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdvdmVyWFllYXJzJywgeWVhcnMsIGxvY2FsaXplT3B0aW9ucyk7XG5cbiAgICAgIC8vIE4geWVhcnMgOSBtb250aHMgdXAgdG8gTiB5ZWFyIDEyIG1vbnRoc1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbG9jYWxlLmZvcm1hdERpc3RhbmNlKCdhbG1vc3RYWWVhcnMnLCB5ZWFycyArIDEsIGxvY2FsaXplT3B0aW9ucyk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IGFzc2lnbiBmcm9tIFwiLi4vYXNzaWduL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuIGFzc2lnbih7fSwgb2JqZWN0KTtcbn0iLCJpbXBvcnQgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRSb3VuZGluZ01ldGhvZCB9IGZyb20gXCIuLi9fbGliL3JvdW5kaW5nTWV0aG9kcy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5TZWNvbmRzXG4gKiBAY2F0ZWdvcnkgU2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnJvdW5kaW5nTWV0aG9kPSd0cnVuYyddIC0gYSByb3VuZGluZyBtZXRob2QgKGBjZWlsYCwgYGZsb29yYCwgYHJvdW5kYCBvciBgdHJ1bmNgKVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBzZWNvbmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IHNlY29uZHMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDE0IDEyOjMwOjA3Ljk5OSBhbmQgMiBKdWx5IDIwMTQgMTI6MzA6MjAuMDAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluU2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDEyLCAzMCwgNywgOTk5KVxuICogKVxuICogLy89PiAxMlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5TZWNvbmRzKGRhdGVMZWZ0LCBkYXRlUmlnaHQsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkaWZmID0gZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpIC8gMTAwMDtcbiAgcmV0dXJuIGdldFJvdW5kaW5nTWV0aG9kKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb3VuZGluZ01ldGhvZCkoZGlmZik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgbWlsbGlzZWNvbmRzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxNCAxMjozMDoyMC42MDAgYW5kIDIgSnVseSAyMDE0IDEyOjMwOjIxLjcwMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMSwgNzAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgNjAwKVxuICogKVxuICogLy89PiAxMTAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdG9EYXRlKGRhdGVMZWZ0KS5nZXRUaW1lKCkgLSB0b0RhdGUoZGF0ZVJpZ2h0KS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGRpc3RhbmNlSW5Xb3JkcyBmcm9tIFwiLi4vZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGZvcm1hdERpc3RhbmNlVG9Ob3dcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlIGFuZCBub3cgaW4gd29yZHMuXG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlIGFuZCBub3cgaW4gd29yZHMuXG4gKlxuICogfCBEaXN0YW5jZSB0byBub3cgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJlc3VsdCAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAwIC4uLiAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGxlc3MgdGhhbiBhIG1pbnV0ZSAgfFxuICogfCAzMCBzZWNzIC4uLiAxIG1pbiAzMCBzZWNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDEgbWludXRlICAgICAgICAgICAgfFxuICogfCAxIG1pbiAzMCBzZWNzIC4uLiA0NCBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFsyLi40NF0gbWludXRlcyAgICAgfFxuICogfCA0NCBtaW5zIC4uLiAzMCBzZWNzIC4uLiA4OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IDEgaG91ciAgICAgICAgfFxuICogfCA4OSBtaW5zIDMwIHNlY3MgLi4uIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IFsyLi4yNF0gaG91cnMgfFxuICogfCAyMyBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiA0MSBocnMgNTkgbWlucyAzMCBzZWNzICAgICAgICAgICAgICAgICB8IDEgZGF5ICAgICAgICAgICAgICAgfFxuICogfCA0MSBocnMgNTkgbWlucyAzMCBzZWNzIC4uLiAyOSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgICAgICAgICB8IFsyLi4zMF0gZGF5cyAgICAgICAgfFxuICogfCAyOSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDQ0IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyB8IGFib3V0IDEgbW9udGggICAgICAgfFxuICogfCA0NCBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDU5IGRheXMgMjMgaHJzIDU5IG1pbnMgMzAgc2VjcyB8IGFib3V0IDIgbW9udGhzICAgICAgfFxuICogfCA1OSBkYXlzIDIzIGhycyA1OSBtaW5zIDMwIHNlY3MgLi4uIDEgeXIgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFsyLi4xMl0gbW9udGhzICAgICAgfFxuICogfCAxIHlyIC4uLiAxIHlyIDMgbW9udGhzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IDEgeWVhciAgICAgICAgfFxuICogfCAxIHlyIDMgbW9udGhzIC4uLiAxIHlyIDkgbW9udGggcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG92ZXIgMSB5ZWFyICAgICAgICAgfFxuICogfCAxIHlyIDkgbW9udGhzIC4uLiAyIHlycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFsbW9zdCAyIHllYXJzICAgICAgfFxuICogfCBOIHlycyAuLi4gTiB5cnMgMyBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFib3V0IE4geWVhcnMgICAgICAgfFxuICogfCBOIHlycyAzIG1vbnRocyAuLi4gTiB5cnMgOSBtb250aHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG92ZXIgTiB5ZWFycyAgICAgICAgfFxuICogfCBOIHlycyA5IG1vbnRocyAuLi4gTisxIHlycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFsbW9zdCBOKzEgeWVhcnMgICAgfFxuICpcbiAqIFdpdGggYG9wdGlvbnMuaW5jbHVkZVNlY29uZHMgPT0gdHJ1ZWA6XG4gKiB8IERpc3RhbmNlIHRvIG5vdyAgICAgfCBSZXN1bHQgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IDAgc2VjcyAuLi4gNSBzZWNzICAgfCBsZXNzIHRoYW4gNSBzZWNvbmRzICB8XG4gKiB8IDUgc2VjcyAuLi4gMTAgc2VjcyAgfCBsZXNzIHRoYW4gMTAgc2Vjb25kcyB8XG4gKiB8IDEwIHNlY3MgLi4uIDIwIHNlY3MgfCBsZXNzIHRoYW4gMjAgc2Vjb25kcyB8XG4gKiB8IDIwIHNlY3MgLi4uIDQwIHNlY3MgfCBoYWxmIGEgbWludXRlICAgICAgICB8XG4gKiB8IDQwIHNlY3MgLi4uIDYwIHNlY3MgfCBsZXNzIHRoYW4gYSBtaW51dGUgICB8XG4gKiB8IDYwIHNlY3MgLi4uIDkwIHNlY3MgfCAxIG1pbnV0ZSAgICAgICAgICAgICB8XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVTZWNvbmRzPWZhbHNlXSAtIGRpc3RhbmNlcyBsZXNzIHRoYW4gYSBtaW51dGUgYXJlIG1vcmUgZGV0YWlsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuYWRkU3VmZml4PWZhbHNlXSAtIHJlc3VsdCBzcGVjaWZpZXMgaWYgbm93IGlzIGVhcmxpZXIgb3IgbGF0ZXIgdGhhbiB0aGUgcGFzc2VkIGRhdGVcbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGRpc3RhbmNlIGluIHdvcmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXREaXN0YW5jZWAgcHJvcGVydHlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgMSBKYW51YXJ5IDIwMTUsIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDIgSnVseSAyMDE0P1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vdyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMilcbiAqIClcbiAqIC8vPT4gJzYgbW9udGhzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiBub3cgaXMgMSBKYW51YXJ5IDIwMTUgMDA6MDA6MDAsXG4gKiAvLyB3aGF0IGlzIHRoZSBkaXN0YW5jZSB0byAxIEphbnVhcnkgMjAxNSAwMDowMDoxNSwgaW5jbHVkaW5nIHNlY29uZHM/XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVRvTm93KFxuICogICBuZXcgRGF0ZSgyMDE1LCAwLCAxLCAwLCAwLCAxNSksXG4gKiAgIHtpbmNsdWRlU2Vjb25kczogdHJ1ZX1cbiAqIClcbiAqIC8vPT4gJ2xlc3MgdGhhbiAyMCBzZWNvbmRzJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAxIEphbnVhcnkgMjAxNSxcbiAqIC8vIHdoYXQgaXMgdGhlIGRpc3RhbmNlIHRvIDEgSmFudWFyeSAyMDE2LCB3aXRoIGEgc3VmZml4P1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VUb05vdyhcbiAqICAgbmV3IERhdGUoMjAxNiwgMCwgMSksXG4gKiAgIHthZGRTdWZmaXg6IHRydWV9XG4gKiApXG4gKiAvLz0+ICdpbiBhYm91dCAxIHllYXInXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDEgSmFudWFyeSAyMDE1LFxuICogLy8gd2hhdCBpcyB0aGUgZGlzdGFuY2UgdG8gMSBBdWd1c3QgMjAxNiBpbiBFc3BlcmFudG8/XG4gKiBjb25zdCBlb0xvY2FsZSA9IHJlcXVpcmUoJ2RhdGUtZm5zL2xvY2FsZS9lbycpXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXREaXN0YW5jZVRvTm93KFxuICogICBuZXcgRGF0ZSgyMDE2LCA3LCAxKSxcbiAqICAge2xvY2FsZTogZW9Mb2NhbGV9XG4gKiApXG4gKiAvLz0+ICdwbGkgb2wgMSBqYXJvJ1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZVRvTm93KGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGRpc3RhbmNlSW5Xb3JkcyhkaXJ0eURhdGUsIERhdGUubm93KCksIG9wdGlvbnMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDApO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBvcHRpb25zKTtcbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuXG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIEcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gWShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTtcbiAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyO1xuXG4gICAgLy8gVHdvIGRpZ2l0IHllYXJcbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9XG5cbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gUihkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpO1xuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIHUoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gUShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiBxKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiBNKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIEwoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKG1vbnRoICsgMSk7XG4gICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIHcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gSShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiBkKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gRChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIEUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiBlKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIGMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiBpKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIGIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIEIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gSyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIGsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiBYKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiB4KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gTyhkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24geihkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gdChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiBUKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcbnZhciB0aW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcbnZhciBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG4gIHZhciBkYXRlVGltZUZvcm1hdDtcbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH1cbn0iLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfb3B0aW9ucyRsb2NhbGUsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlMiwgX29wdGlvbnMkbG9jYWxlMiRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIsIF9yZWY1LCBfcmVmNiwgX3JlZjcsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlMywgX29wdGlvbnMkbG9jYWxlMyRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0O1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHZhciBtYXRjaGVkID0gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cCk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHsgbXlQcm9qZWN0cywgY3VycmVudEZvbGRlck5hbWUsIGFkZFByb2ogfSBmcm9tIFwiLi9hZGRQcm9qZWN0XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0RGlzdGFuY2VUb05vd30gZnJvbSAnZGF0ZS1mbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheU15UHJvamVjdCgpe1xuICAgIGxldCB4ID0gbXlQcm9qZWN0cy5sZW5ndGgtMTtcbiAgICBjb25zdCBjb250ZW50PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudEJvZHknKTtcbiAgICBjb250ZW50LnN0eWxlLmRpc3BsYXk9J2Jsb2NrJztcbiAgICBjb25zdCB0b0RvUHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdG9Eb1Byb2ouY2xhc3NMaXN0LmFkZCgndG9Eb1Byb2onKTtcbiAgICB0b0RvUHJvai5pZCA9IGB0b0RvUHJvaiR7eH1gO1xuICAgIC8vIGNyZWF0ZSB0aGUgbGVmdC1zaWRlIHByb2plY3QgY29udGFpbmVyXG4gICAgY29uc3QgbGVmdHNpZGVQcm9qID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsZWZ0c2lkZVByb2ouaWQgPSBcImxlZnRzaWRlUHJvalwiO1xuICAgIC8vIGNyZWF0ZSB0aGUgY2hlY2tib3ggaW5wdXQgZWxlbWVudFxuICAgIGNvbnN0IHByb2pDb21wbGV0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBwcm9qQ29tcGxldGUudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICBwcm9qQ29tcGxldGUuaWQgPSBgJHt4fWA7XG4gICAgcHJvakNvbXBsZXRlLmNoZWNrZWQ9bXlQcm9qZWN0c1t4XS5zdGF0dXM7XG4gICAgcHJvakNvbXBsZXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3RyaWtlVGV4dCk7XG4gICBcbiAgICBsZWZ0c2lkZVByb2ouYXBwZW5kQ2hpbGQocHJvakNvbXBsZXRlKTtcbiAgICAvLyBjcmVhdGUgdGhlIHByb2plY3QgdGl0bGUgZWxlbWVudFxuICAgIGNvbnN0IHByb2pUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcHJvalRpdGxlLmlkID0gYHByb2pUaXRsZSR7eH1gO1xuICAgIHByb2pUaXRsZS50ZXh0Q29udGVudCA9IG15UHJvamVjdHNbeF0udGl0bGU7XG4gICAgbGVmdHNpZGVQcm9qLmFwcGVuZENoaWxkKHByb2pUaXRsZSk7XG4gICAgLy8gY3JlYXRlIHRoZSByaWdodC1zaWRlIHByb2plY3QgY29udGFpbmVyXG4gICAgY29uc3QgcmlnaHRzaWRlUHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgcmlnaHRzaWRlUHJvai5pZCA9IFwicmlnaHRzaWRlUHJvalwiO1xuICAgIC8vIGNyZWF0ZSB0aGUgcHJvamVjdCBkZXRhaWxzIGJ1dHRvblxuICAgIGNvbnN0IHByb2plY3REZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBwcm9qZWN0RGV0YWlscy5pZCA9IGAke3h9YDtcbiAgICBwcm9qZWN0RGV0YWlscy50ZXh0Q29udGVudCA9IFwiRGV0YWlsc1wiO1xuICAgIHByb2plY3REZXRhaWxzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd0RldGFpbHMpO1xuICAgIHJpZ2h0c2lkZVByb2ouYXBwZW5kQ2hpbGQocHJvamVjdERldGFpbHMpO1xuICAgIC8vIGNyZWF0ZSB0aGUgcHJvamVjdCBkdWUgZGF0ZSBlbGVtZW50XG4gICAgY29uc3QgcHJvakR1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHByb2pEdWVEYXRlLmlkID0gXCJwcm9qRHVlRGF0ZVwiO1xuICAgIGlmKG15UHJvamVjdHNbeF0uZGF0ZSl7XG4gICAgICAgIGNvbnN0IGZvcm1hdERhdGU9IGBEdWUgJHtmb3JtYXREaXN0YW5jZVRvTm93KG5ldyBEYXRlKG15UHJvamVjdHNbeF0uZGF0ZSksIHthZGRTdWZmaXg6dHJ1ZX0pfWBcbiAgICAgICAgcHJvakR1ZURhdGUudGV4dENvbnRlbnQgPSBmb3JtYXREYXRlO31cbiAgICByaWdodHNpZGVQcm9qLmFwcGVuZENoaWxkKHByb2pEdWVEYXRlKTtcbiAgICAvLyBjcmVhdGUgdGhlIGNhbmNlbCBwcm9qZWN0IGJ1dHRvblxuICAgIGNvbnN0IGNhbmNlbFByb2ogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGNhbmNlbFByb2ouaWQgPSBgJHt4fWA7XG4gICAgY2FuY2VsUHJvai5jbGFzc0xpc3QuYWRkKCdjYW5jZWxQcm9qQnV0dG9uJyk7XG4gICAgY2FuY2VsUHJvai50ZXh0Q29udGVudCA9IFwiWFwiO1xuICAgIGNhbmNlbFByb2ouYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGNhbmNlbFRvRG8pO1xuICAgIHJpZ2h0c2lkZVByb2ouYXBwZW5kQ2hpbGQoY2FuY2VsUHJvaik7XG4gICAgLy8gYWRkIHRoZSBsZWZ0IGFuZCByaWdodCBjb250YWluZXJzIHRvIHRoZSBtYWluIGRpdiBjb250YWluZXJcbiAgICB0b0RvUHJvai5hcHBlbmRDaGlsZChsZWZ0c2lkZVByb2opO1xuICAgIHRvRG9Qcm9qLmFwcGVuZENoaWxkKHJpZ2h0c2lkZVByb2opO1xuICAgIC8vIGFkZCB0aGUgbWFpbiBkaXYgY29udGFpbmVyIHRvIHRoZSBkb2N1bWVudCBib2R5XG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh0b0RvUHJvaik7XG4gICAgLy9pZiBoaWdoIHByaW9yaXR5IHByb2plY3Qgc3R5bGUgZWxlbWVudFxuICAgIGlmKG15UHJvamVjdHNbeF0ucHJpb3JpdHk9PT10cnVlKXtcbiAgICAgICAgcHJvalRpdGxlLnN0eWxlLmNvbG9yPSAncmVkJztcbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpa2VUZXh0KGV2ZW50KXtcbiAgICBsZXQgeD1ldmVudC50YXJnZXQuaWQ7XG4gICAgbGV0IGNoZWNrZWRUb0RvPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgdG9Eb1Byb2oke3h9YCk7XG4gICAgbGV0IHRvRG9UaXRsZVRleHQ9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwcm9qVGl0bGUke3h9YCkudGV4dENvbnRlbnQ7XG4gICAgaWYobXlQcm9qZWN0c1t4XS5zdGF0dXM9PT1mYWxzZSl7XG4gICAgICAgIGNoZWNrZWRUb0RvLnN0eWxlLmJvcmRlcj0gJ2luc2V0JztcbiAgICAgICAgbXlQcm9qZWN0c1t4XS5zdGF0dXM9dHJ1ZTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHByb2pUaXRsZSR7eH1gKS5pbm5lckhUTUw9YDxkZWw+JHt0b0RvVGl0bGVUZXh0fTwvZGVsPmA7XG4gICAgfSAgIGVsc2V7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBwcm9qVGl0bGUke3h9YCkuaW5uZXJIVE1MPWAke3RvRG9UaXRsZVRleHR9YDtcbiAgICAgICAgY2hlY2tlZFRvRG8uc3R5bGUuYm9yZGVyPSAnMXB4IHNvbGlkIGJsYWNrJztcbiAgICAgICAgbXlQcm9qZWN0c1t4XS5zdGF0dXM9ZmFsc2U7XG4gICAgfVxuICAgIGxldCBhcnJheVN0b3JhZ2U9IEpTT04uc3RyaW5naWZ5KG15UHJvamVjdHMpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0QXJyYXknLCBhcnJheVN0b3JhZ2UpO1xufVxuLy9kb2VzbnQganVzdCBhcHBlbmQgbGFzdCBwcm9qZWN0IGFwcGVuZHMgYWxsXG5leHBvcnQgZnVuY3Rpb24gb3JnYW5pemVQcm9qZWN0Rm9sZGVyKCl7XG4gICAgY29uc3QgY29udGVudEJvZHk9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50Qm9keScpO1xuICAgIGNvbnRlbnRCb2R5LmlubmVyVGV4dD0nJztcbiAgICBmb3IgKGxldCBpPTA7IGk8bXlQcm9qZWN0cy5sZW5ndGg7IGkrKyl7XG4gICAgICBpZihteVByb2plY3RzW2ldLmZvbGRlcj09PWN1cnJlbnRGb2xkZXJOYW1lKXsgIFxuICAgICAgICAgICAgY29uc3QgY29udGVudD0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnRCb2R5Jyk7XG4gICAgICAgICAgICBjb250ZW50LnN0eWxlLmRpc3BsYXk9J2Jsb2NrJztcbiAgICAgICAgICAgIGNvbnN0IHRvRG9Qcm9qID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRvRG9Qcm9qLmNsYXNzTGlzdC5hZGQoJ3RvRG9Qcm9qJyk7XG4gICAgICAgICAgICB0b0RvUHJvai5pZCA9IGB0b0RvUHJvaiR7aX1gO1xuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBsZWZ0LXNpZGUgcHJvamVjdCBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnN0IGxlZnRzaWRlUHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBsZWZ0c2lkZVByb2ouaWQgPSBcImxlZnRzaWRlUHJvalwiO1xuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBjaGVja2JveCBpbnB1dCBlbGVtZW50XG4gICAgICAgICAgICBjb25zdCBwcm9qQ29tcGxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICBwcm9qQ29tcGxldGUudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgICAgIHByb2pDb21wbGV0ZS5jaGVja2VkPW15UHJvamVjdHNbaV0uc3RhdHVzO1xuICAgICAgICAgICAgcHJvakNvbXBsZXRlLmlkID0gYCR7aX1gO1xuICAgICAgICAgICAgcHJvakNvbXBsZXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3RyaWtlVGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxlZnRzaWRlUHJvai5hcHBlbmRDaGlsZChwcm9qQ29tcGxldGUpO1xuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBwcm9qZWN0IHRpdGxlIGVsZW1lbnRcbiAgICAgICAgICAgIGNvbnN0IHByb2pUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBwcm9qVGl0bGUuaWQgPSBgcHJvalRpdGxlJHtpfWA7XG4gICAgICAgICAgICBwcm9qVGl0bGUudGV4dENvbnRlbnQgPSBteVByb2plY3RzW2ldLnRpdGxlO1xuICAgICAgICAgICAgaWYocHJvakNvbXBsZXRlLmNoZWNrZWQ9PT10cnVlKXtcbiAgICAgICAgICAgICAgICB0b0RvUHJvai5zdHlsZS5ib3JkZXI9J2luc2V0JztcbiAgICAgICAgICAgICAgICBwcm9qVGl0bGUuaW5uZXJIVE1MPSBgPGRlbD4ke215UHJvamVjdHNbaV0udGl0bGV9PC9kZWw+YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlZnRzaWRlUHJvai5hcHBlbmRDaGlsZChwcm9qVGl0bGUpO1xuICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSByaWdodC1zaWRlIHByb2plY3QgY29udGFpbmVyXG4gICAgICAgICAgICBjb25zdCByaWdodHNpZGVQcm9qID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHJpZ2h0c2lkZVByb2ouaWQgPSBcInJpZ2h0c2lkZVByb2pcIjtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgcHJvamVjdCBkZXRhaWxzIGJ1dHRvblxuICAgICAgICAgICAgY29uc3QgcHJvamVjdERldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgcHJvamVjdERldGFpbHMuaWQgPSBgJHtpfWA7XG4gICAgICAgICAgICBwcm9qZWN0RGV0YWlscy50ZXh0Q29udGVudCA9IFwiRGV0YWlsc1wiO1xuICAgICAgICAgICAgcHJvamVjdERldGFpbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93RGV0YWlscyk7XG4gICAgICAgICAgICByaWdodHNpZGVQcm9qLmFwcGVuZENoaWxkKHByb2plY3REZXRhaWxzKTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgcHJvamVjdCBkdWUgZGF0ZSBlbGVtZW50XG4gICAgICAgICAgICBjb25zdCBwcm9qRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICBwcm9qRHVlRGF0ZS5pZCA9IFwicHJvakR1ZURhdGVcIjtcbiAgICAgICAgICAgIGlmKG15UHJvamVjdHNbaV0uZGF0ZSl7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0RGF0ZT0gYER1ZSAke2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUobXlQcm9qZWN0c1tpXS5kYXRlKSwge2FkZFN1ZmZpeDp0cnVlfSl9YDtcbiAgICAgICAgICAgICAgICBwcm9qRHVlRGF0ZS50ZXh0Q29udGVudCA9IGZvcm1hdERhdGV9O1xuICAgICAgICAgICAgcmlnaHRzaWRlUHJvai5hcHBlbmRDaGlsZChwcm9qRHVlRGF0ZSk7XG4gICAgICAgICAgICAvLyBjcmVhdGUgdGhlIGNhbmNlbCBwcm9qZWN0IGJ1dHRvblxuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgICAgICBjYW5jZWxQcm9qLmlkID0gYCR7aX1gO1xuICAgICAgICAgICAgY2FuY2VsUHJvai50ZXh0Q29udGVudCA9IFwiWFwiO1xuICAgICAgICAgICAgY2FuY2VsUHJvai5jbGFzc0xpc3QuYWRkKCdjYW5jZWxQcm9qQnV0dG9uJyk7XG4gICAgICAgICAgICBjYW5jZWxQcm9qLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxjYW5jZWxUb0RvKTtcbiAgICAgICAgICAgIHJpZ2h0c2lkZVByb2ouYXBwZW5kQ2hpbGQoY2FuY2VsUHJvaik7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIGxlZnQgYW5kIHJpZ2h0IGNvbnRhaW5lcnMgdG8gdGhlIG1haW4gZGl2IGNvbnRhaW5lclxuICAgICAgICAgICAgdG9Eb1Byb2ouYXBwZW5kQ2hpbGQobGVmdHNpZGVQcm9qKTtcbiAgICAgICAgICAgIHRvRG9Qcm9qLmFwcGVuZENoaWxkKHJpZ2h0c2lkZVByb2opO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBtYWluIGRpdiBjb250YWluZXIgdG8gdGhlIGRvY3VtZW50IGJvZHlcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQodG9Eb1Byb2opO1xuICAgICAgICAgICAgLy9pZiBoaWdoIHByaW9yaXR5IHByb2plY3Qgc3R5bGUgZWxlbWVudFxuICAgICAgICAgICAgaWYobXlQcm9qZWN0c1tpXS5wcmlvcml0eT09PXRydWUpe1xuICAgICAgICAgICAgICAgIHByb2pUaXRsZS5zdHlsZS5jb2xvcj0gJ3JlZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgXG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlHZW5lcmFsKCl7XG4gICAgY29uc3QgY29udGVudD0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnRCb2R5Jyk7XG4gICAgY29udGVudC5pbm5lclRleHQ9Jyc7XG4gICAgY29udGVudC5zdHlsZS5kaXNwbGF5PSdibG9jayc7XG4gICAgZm9yIChsZXQgaT0wOyBpPG15UHJvamVjdHMubGVuZ3RoOyBpKyspe1xuICAgICAgICAvL2NvbnN0IGNvbnRlbnQ9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250ZW50Qm9keScpO1xuICAgICAgICBjb25zdCB0b0RvUHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRvRG9Qcm9qLmNsYXNzTGlzdC5hZGQoJ3RvRG9Qcm9qJyk7XG4gICAgICAgIHRvRG9Qcm9qLmlkID0gYHRvRG9Qcm9qJHtpfWA7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgbGVmdC1zaWRlIHByb2plY3QgY29udGFpbmVyXG4gICAgICAgIGNvbnN0IGxlZnRzaWRlUHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGxlZnRzaWRlUHJvai5pZCA9IFwibGVmdHNpZGVQcm9qXCI7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgY2hlY2tib3ggaW5wdXQgZWxlbWVudFxuICAgICAgICBjb25zdCBwcm9qQ29tcGxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgIHByb2pDb21wbGV0ZS50eXBlID0gXCJjaGVja2JveFwiO1xuICAgICAgICBwcm9qQ29tcGxldGUuY2hlY2tlZD0gbXlQcm9qZWN0c1tpXS5zdGF0dXM7XG4gICAgICAgIHByb2pDb21wbGV0ZS5pZCA9IGAke2l9YDtcbiAgICAgICAgcHJvakNvbXBsZXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3RyaWtlVGV4dCk7XG5cbiAgICAgICAgbGVmdHNpZGVQcm9qLmFwcGVuZENoaWxkKHByb2pDb21wbGV0ZSk7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgcHJvamVjdCB0aXRsZSBlbGVtZW50XG4gICAgICAgIGNvbnN0IHByb2pUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHByb2pUaXRsZS5pZCA9IGBwcm9qVGl0bGUke2l9YDtcbiAgICAgICAgcHJvalRpdGxlLnRleHRDb250ZW50ID0gbXlQcm9qZWN0c1tpXS50aXRsZTtcbiAgICAgICAgaWYocHJvakNvbXBsZXRlLmNoZWNrZWQ9PT10cnVlKXtcbiAgICAgICAgICAgIHRvRG9Qcm9qLnN0eWxlLmJvcmRlcj0naW5zZXQnO1xuICAgICAgICAgICAgcHJvalRpdGxlLmlubmVySFRNTD0gYDxkZWw+JHtteVByb2plY3RzW2ldLnRpdGxlfTwvZGVsPmA7XG4gICAgICAgIH1cbiAgICAgICAgbGVmdHNpZGVQcm9qLmFwcGVuZENoaWxkKHByb2pUaXRsZSk7XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgcmlnaHQtc2lkZSBwcm9qZWN0IGNvbnRhaW5lclxuICAgICAgICBjb25zdCByaWdodHNpZGVQcm9qID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgcmlnaHRzaWRlUHJvai5pZCA9IFwicmlnaHRzaWRlUHJvalwiO1xuICAgICAgICAvLyBjcmVhdGUgdGhlIHByb2plY3QgZGV0YWlscyBidXR0b25cbiAgICAgICAgY29uc3QgcHJvamVjdERldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBwcm9qZWN0RGV0YWlscy5pZCA9IGAke2l9YDtcbiAgICAgICAgcHJvamVjdERldGFpbHMudGV4dENvbnRlbnQgPSBcIkRldGFpbHNcIjtcbiAgICAgICAgcHJvamVjdERldGFpbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaG93RGV0YWlscyk7XG4gICAgICAgIHJpZ2h0c2lkZVByb2ouYXBwZW5kQ2hpbGQocHJvamVjdERldGFpbHMpO1xuICAgICAgICAvLyBjcmVhdGUgdGhlIHByb2plY3QgZHVlIGRhdGUgZWxlbWVudFxuICAgICAgICBjb25zdCBwcm9qRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHByb2pEdWVEYXRlLmlkID0gXCJwcm9qRHVlRGF0ZVwiO1xuICAgICAgICBpZihteVByb2plY3RzW2ldLmRhdGUpe1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0RGF0ZT0gYER1ZSAke2Zvcm1hdERpc3RhbmNlVG9Ob3cobmV3IERhdGUobXlQcm9qZWN0c1tpXS5kYXRlKSwge2FkZFN1ZmZpeDp0cnVlfSl9YDtcbiAgICAgICAgICAgIHByb2pEdWVEYXRlLnRleHRDb250ZW50ID0gZm9ybWF0RGF0ZTt9XG4gICAgICAgIHJpZ2h0c2lkZVByb2ouYXBwZW5kQ2hpbGQocHJvakR1ZURhdGUpO1xuICAgICAgICAvLyBjcmVhdGUgdGhlIGNhbmNlbCBwcm9qZWN0IGJ1dHRvblxuICAgICAgICBjb25zdCBjYW5jZWxQcm9qID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgY2FuY2VsUHJvai5pZCA9IGAke2l9YDtcbiAgICAgICAgY2FuY2VsUHJvai50ZXh0Q29udGVudCA9IFwiWFwiO1xuICAgICAgICBjYW5jZWxQcm9qLmNsYXNzTGlzdC5hZGQoJ2NhbmNlbFByb2pCdXR0b24nKTtcbiAgICAgICAgY2FuY2VsUHJvai5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsY2FuY2VsVG9Ebyk7XG4gICAgICAgIHJpZ2h0c2lkZVByb2ouYXBwZW5kQ2hpbGQoY2FuY2VsUHJvaik7XG4gICAgICAgIC8vIGFkZCB0aGUgbGVmdCBhbmQgcmlnaHQgY29udGFpbmVycyB0byB0aGUgbWFpbiBkaXYgY29udGFpbmVyXG4gICAgICAgIHRvRG9Qcm9qLmFwcGVuZENoaWxkKGxlZnRzaWRlUHJvaik7XG4gICAgICAgIHRvRG9Qcm9qLmFwcGVuZENoaWxkKHJpZ2h0c2lkZVByb2opO1xuICAgICAgICAvLyBhZGQgdGhlIG1haW4gZGl2IGNvbnRhaW5lciB0byB0aGUgZG9jdW1lbnQgYm9keVxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKHRvRG9Qcm9qKTtcbiAgICAgICAgLy9pZiBoaWdoIHByaW9yaXR5IHByb2plY3Qgc3R5bGUgZWxlbWVudFxuICAgICAgICBpZihteVByb2plY3RzW2ldLnByaW9yaXR5PT09dHJ1ZSl7XG4gICAgICAgICAgICBwcm9qVGl0bGUuc3R5bGUuY29sb3I9ICdyZWQnO1xuICAgICAgICB9ICAgICAgICAgXG4gICAgfSAgIFxufVxuZnVuY3Rpb24gY2FuY2VsVG9Ebyh4KXtcbiAgICBsZXQgdGFyZ2V0PSB4LnRhcmdldC5pZDtcbiAgICBteVByb2plY3RzLnNwbGljZSh0YXJnZXQsMSk7XG4gICAgaWYgKGN1cnJlbnRGb2xkZXJOYW1lPT09J0dlbmVyYWwnKXtcbiAgICAgICAgZGlzcGxheUdlbmVyYWwoKTtcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgb3JnYW5pemVQcm9qZWN0Rm9sZGVyKCk7XG4gICAgfVxuICAgIGxldCBhcnJheVN0b3JhZ2U9IEpTT04uc3RyaW5naWZ5KG15UHJvamVjdHMpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0QXJyYXknLCBhcnJheVN0b3JhZ2UpO1xufVxubGV0IGRldGFpbHNTd2l0Y2g9IHRydWU7XG5sZXQgdGFyZ2V0VG9EbztcbmV4cG9ydCB7dGFyZ2V0VG9Eb307XG5mdW5jdGlvbiBzaG93RGV0YWlscyh4KXtcbiAgICB0YXJnZXRUb0RvPSB4LnRhcmdldC5pZFxuICAgIGNvbnN0IHRpdGxlPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxUaXRsZURhdGEnKTtcbiAgICBjb25zdCBmb2xkZXI9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbEZvbGRlckRhdGEnKTtcbiAgICBjb25zdCBkYXRlPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxEYXRlRGF0YScpO1xuICAgIGNvbnN0IHByaW9yaXR5PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxQcmlvcml0eURhdGEnKTtcbiAgICBjb25zdCBkZXRhaWxzPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxEZXRhaWxzRGF0YScpO1xuICAgIGNvbnN0IG1vZGFsRGV0YWlscz0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsRGV0YWlscycpO1xuICAgIGlmKGRldGFpbHNTd2l0Y2g9PT10cnVlKXtcbiAgICAgICAgbW9kYWxEZXRhaWxzLnN0eWxlLnRyYW5zaXRpb24gPSBcIm9wYWNpdHkgLjZzIGVhc2UtaW5cIjtcbiAgICAgICAgbW9kYWxEZXRhaWxzLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgbW9kYWxEZXRhaWxzLnN0eWxlLm9wYWNpdHkgPSBcIjEwMCVcIjtcbiAgICAgICAgbW9kYWxEZXRhaWxzLnN0eWxlLnpJbmRleCA9IFwiMVwiO1xuICAgICAgICB0aXRsZS5pbm5lclRleHQ9IG15UHJvamVjdHNbdGFyZ2V0VG9Eb10udGl0bGU7ICAvL2lubmVyaHRtbD9cbiAgICAgICAgZm9sZGVyLmlubmVyVGV4dD0gbXlQcm9qZWN0c1t0YXJnZXRUb0RvXS5mb2xkZXI7XG4gICAgICAgIGlmKG15UHJvamVjdHNbdGFyZ2V0VG9Eb10uZGF0ZSl7IFxuICAgICAgICAgICAgY29uc3QgZm9ybWF0RGF0ZT0gZm9ybWF0KG5ldyBEYXRlKG15UHJvamVjdHNbdGFyZ2V0VG9Eb10uZGF0ZSksICdNTU1NIGRkLCB5eXl5Jyk7XG4gICAgICAgICAgICBkYXRlLmlubmVyVGV4dD0gZm9ybWF0RGF0ZTt9XG4gICAgICAgIGRldGFpbHMuaW5uZXJUZXh0PSBteVByb2plY3RzW3RhcmdldFRvRG9dLmRlc2NyaXB0aW9uO1xuICAgICAgICBpZihteVByb2plY3RzW3RhcmdldFRvRG9dLnByaW9yaXR5PT09dHJ1ZSl7cHJpb3JpdHkuaW5uZXJUZXh0PSdIaWdoJ31cbiAgICAgICAgaWYobXlQcm9qZWN0c1t0YXJnZXRUb0RvXS5wcmlvcml0eT09PWZhbHNlKXtwcmlvcml0eS5pbm5lclRleHQ9J0xvdyd9XG4gICAgICAgIGRldGFpbHNTd2l0Y2g9ZmFsc2U7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIG1vZGFsRGV0YWlscy5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgICAgIG1vZGFsRGV0YWlscy5zdHlsZS56SW5kZXggPSBcIi0xXCI7XG4gICAgICAgIGRldGFpbHNTd2l0Y2g9dHJ1ZTtcbiAgICB9ICAgIFxufVxuLy9jbG9zZSB0aGUgRGV0YWlscyBtb2RhbFxuY29uc3QgY2FuY2VsTW9kYWxEZXRhaWxzPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsTW9kYWxEZXRhaWxzJyk7XG5jYW5jZWxNb2RhbERldGFpbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYW5jZWxNb2RhbERlZXRzKVxuZnVuY3Rpb24gY2FuY2VsTW9kYWxEZWV0cygpe1xuICAgIG1vZGFsRGV0YWlscy5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgbW9kYWxEZXRhaWxzLnN0eWxlLnpJbmRleCA9IFwiLTFcIjtcbiAgICBkZXRhaWxzU3dpdGNoPXRydWU7ICAgIFxufTtcbmNvbnN0IGVkaXRNb2RhbERldGFpbHM9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0TW9kYWxEZXRhaWxzJyk7XG5sZXQgZWRpdERldGFpbHNTd2l0Y2g9ZmFsc2U7XG5sZXQgdGVtcGZvbGRlcj0nJztcbmV4cG9ydCB7IGVkaXREZXRhaWxzU3dpdGNoLCB0ZW1wZm9sZGVyIH1cbmVkaXRNb2RhbERldGFpbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT57XG4gICAgZWRpdERldGFpbHNTd2l0Y2g9dHJ1ZTtcbiAgICBjYW5jZWxNb2RhbERlZXRzKCk7XG4gICAgYWRkUHJvaigpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdFRpdGxlXCIpLnZhbHVlID0gYCR7bXlQcm9qZWN0c1t0YXJnZXRUb0RvXS50aXRsZX1gO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdERlc2NyaXB0aW9uXCIpLnZhbHVlID0gYCR7bXlQcm9qZWN0c1t0YXJnZXRUb0RvXS5kZXNjcmlwdGlvbn1gO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVlRGF0ZVwiKS52YWx1ZSA9IGAke215UHJvamVjdHNbdGFyZ2V0VG9Eb10uZGF0ZX1gO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJpb3JpdHlcIikuY2hlY2tlZCA9IG15UHJvamVjdHNbdGFyZ2V0VG9Eb10ucHJpb3JpdHk7XG4gICAgdGVtcGZvbGRlcj1teVByb2plY3RzW3RhcmdldFRvRG9dLmZvbGRlcjtcbn0pIiwiaW1wb3J0IHsgYWRkUHJvalN3aXRjaCwgY3VycmVudEZvbGRlck5hbWUgfSBmcm9tIFwiLi9hZGRQcm9qZWN0XCI7XG5cbmV4cG9ydCB7IGFkZE5vdGVTd2l0Y2ggfTtcbmxldCBhZGROb3RlU3dpdGNoID0gdHJ1ZTtcbmNvbnN0IG5vdGVCb3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vdGVCb3hcIik7XG5jb25zdCBjYXJkPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FyZCcpO1xuLy9Ob3RlIGZvcm0gYXBwZWFyc1xuZXhwb3J0IGZ1bmN0aW9uIGFkZE5vdGUoKSB7XG4gIGlmIChhZGRQcm9qU3dpdGNoID09PSBmYWxzZSkge1xuICAgIGFkZFByb2ooKTtcbiAgfVxuICBpZiAoYWRkTm90ZVN3aXRjaCA9PT0gdHJ1ZSkge1xuICAgIG5vdGVCb3guc3R5bGUudHJhbnNpdGlvbiA9IFwib3BhY2l0eSAuNnMgZWFzZS1pblwiO1xuICAgIG5vdGVCb3guc3R5bGUub3BhY2l0eSA9IFwiMTAwJVwiO1xuICAgIG5vdGVCb3guc3R5bGUuekluZGV4ID0gXCIxXCI7XG4gICAgYWRkTm90ZVN3aXRjaCA9IGZhbHNlO1xuICAgIGNvbnN0IG5vdGVUaXRsZUlucHV0PSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90ZVRpdGxlJyk7XG4gICAgbm90ZVRpdGxlSW5wdXQuZm9jdXMoKTtcbiAgfSBlbHNlIHtcbiAgICBub3RlQm94LnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBub3RlQm94LnN0eWxlLnpJbmRleCA9IFwiLTFcIjtcbiAgICBhZGROb3RlU3dpdGNoID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vdGVUaXRsZVwiKS52YWx1ZSA9IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub3RlRGVzY3JpcHRpb25cIikudmFsdWUgPSBcIlwiO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuY2VsTm90ZUZvcm0oKSB7XG4gIG5vdGVCb3guc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuICBub3RlQm94LnN0eWxlLnpJbmRleCA9IFwiLTFcIjtcbiAgYWRkTm90ZVN3aXRjaCA9IHRydWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90ZVRpdGxlXCIpLnZhbHVlID0gXCJcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub3RlRGVzY3JpcHRpb25cIikudmFsdWUgPSBcIlwiO1xufVxuLy9jb2xsZWN0IE5vdGUgZGF0YS0tIG11c3QgcmVxdWlyZSBiZWZvcmUgYXJyYXkgcHVzaFxubGV0IG15Tm90ZXBhZCA9IFtdO1xuZXhwb3J0IHsgbXlOb3RlcGFkIH07XG4vL3B1c2ggbm90ZXMgaW50byBhbiBhcnJheVxuZXhwb3J0IGZ1bmN0aW9uIHN1Ym1pdE5vdGUoZXZlbnQpIHtcbiAgbGV0IG5vdGVUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90ZVRpdGxlXCIpLnZhbHVlO1xuICBsZXQgbm90ZURlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub3RlRGVzY3JpcHRpb25cIikudmFsdWU7XG4gIGxldCBjb2xvclNlbGVjdFZhbHVlPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbG9yU2VsZWN0XCIpLnZhbHVlO1xuICBmdW5jdGlvbiBub3RlRGF0YShub3RlVGl0bGUsIG5vdGVEZXNjcmlwdGlvbiwgY29sb3JTZWxlY3RWYWx1ZSkge1xuICAgIHRoaXMudGl0bGUgPSBub3RlVGl0bGU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IG5vdGVEZXNjcmlwdGlvbjtcbiAgICB0aGlzLmNvbG9yPSBjb2xvclNlbGVjdFZhbHVlO1xuICB9XG4gIGlmIChub3RlVGl0bGUpIHtcbiAgICBteU5vdGVwYWQucHVzaChuZXcgbm90ZURhdGEobm90ZVRpdGxlLCBub3RlRGVzY3JpcHRpb24sIGNvbG9yU2VsZWN0VmFsdWUpKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGFkZE5vdGUoKTtcbiAgICBkaXNwbGF5TXlOb3RlcygpO1xuICAgIGxldCBteU5vdGVwYWRTdHJpbmc9IEpTT04uc3RyaW5naWZ5KG15Tm90ZXBhZCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25vdGVwYWRTdG9yYWdlJywgbXlOb3RlcGFkU3RyaW5nKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheU15Tm90ZXMoKSB7XG4gIC8vbXVzdCBzdHlsZSBub3RlcyBhbmQgc2V0IHVwIGdyaWQgcGF0dGVybiBmb3IgZG9tIGNyZWF0aW9uIGFuZCBwbGFuIGZvciBvdmVyZmxvdyBpbiBub3RlIGFuZCBtdWx0aXBsZXMgbm90ZXMgb3ZlcmZsb3dpbmcgdGhlIGNvbnRlbnQgYm94XG4gIC8vcmVwbGFjZSBtZW51IGJ1dHRvbiB3aXRoIGxvZ29cbiAgLy9ob3cgdG8gbWFrZSBzbyBoaXR0aW5nIGVudGVyIG9uIGZvcm1zIHN1Ym1pdHMgZm9ybSBvciBhdCBsZWFzdCBkb2VzbnQgY2xvc2UgZm9ybT9cbiAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGVudEJvZHlcIik7XG4gIGNvbnRlbnQuaW5uZXJUZXh0ID0gXCJcIjtcbiAgY29uc3QgZm9sZGVyTmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3VycmVudEZvbGRlck5hbWVcIik7XG4gIGZvbGRlck5hbWUuaW5uZXJUZXh0ID0gXCJOb3RlcGFkXCI7XG4gIGN1cnJlbnRGb2xkZXJOYW1lID0gZm9sZGVyTmFtZS5pbm5lclRleHQ7XG4gIGNvbnRlbnQuc3R5bGUuZGlzcGxheT0nZ3JpZCc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbXlOb3RlcGFkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9Eb05vdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRvRG9Ob3RlLmNsYXNzTGlzdC5hZGQoXCJ0b0RvTm90ZVwiKTtcbiAgICB0b0RvTm90ZS5pZCA9IGB0b0RvTm90ZSR7aX1gO1xuICAgIHRvRG9Ob3RlLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgIHRvRG9Ob3RlLnN0eWxlLmJhY2tncm91bmRDb2xvcj0gYCR7bXlOb3RlcGFkW2ldLmNvbG9yfWA7XG5cbiAgICBjb25zdCBub3RlVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgbm90ZVRpdGxlLmNsYXNzTmFtZSA9IFwibm90ZVRpdGxlSDNcIjtcbiAgICBub3RlVGl0bGUuaWQgPSBgJHtpfWA7XG4gICAgbm90ZVRpdGxlLnRleHRDb250ZW50ID0gbXlOb3RlcGFkW2ldLnRpdGxlO1xuICAgIG5vdGVUaXRsZS5jb250ZW50RWRpdGFibGUgPSB0cnVlO1xuICAgIG5vdGVUaXRsZS5zcGVsbGNoZWNrID0gZmFsc2U7XG4gICAgbm90ZVRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBlZGl0Tm90ZURldGFpbHMpO1xuICAgIHRvRG9Ob3RlLmFwcGVuZENoaWxkKG5vdGVUaXRsZSk7XG5cbiAgICBjb25zdCBub3RlRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG5vdGVEZXNjcmlwdGlvbi5jbGFzc05hbWUgPSBcIm5vdGVEZXNjcmlwdGlvbkRpdlwiO1xuICAgIG5vdGVEZXNjcmlwdGlvbi5pZCA9IGAke2l9YDtcbiAgICBub3RlRGVzY3JpcHRpb24uY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcbiAgICBub3RlRGVzY3JpcHRpb24uc3BlbGxjaGVjayA9IGZhbHNlO1xuICAgIG5vdGVEZXNjcmlwdGlvbi5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZWRpdE5vdGVEZXRhaWxzKTtcbiAgICBub3RlRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBteU5vdGVwYWRbaV0uZGVzY3JpcHRpb247XG4gICAgdG9Eb05vdGUuYXBwZW5kQ2hpbGQobm90ZURlc2NyaXB0aW9uKTtcblxuICAgIGNvbnN0IHJlbW92ZU5vdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIHJlbW92ZU5vdGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgcmVtb3ZlTm90ZS5zdHlsZS5ib3R0b20gPSBcIjVweFwiO1xuICAgIHJlbW92ZU5vdGUuaWQgPSBgJHtpfWA7XG4gICAgcmVtb3ZlTm90ZS50ZXh0Q29udGVudCA9IFwiWFwiO1xuICAgIHJlbW92ZU5vdGUuY2xhc3NMaXN0LmFkZChcInJlbW92ZU5vdGVCdXR0b25cIik7XG4gICAgcmVtb3ZlTm90ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVtb3ZlTXlOb3RlKTtcblxuICAgIHRvRG9Ob3RlLmFwcGVuZENoaWxkKHJlbW92ZU5vdGUpO1xuXG4gICAgY29udGVudC5hcHBlbmRDaGlsZCh0b0RvTm90ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZWRpdE5vdGVEZXRhaWxzKHgpIHtcbiAgbGV0IHRhcmdldElEID0geC50YXJnZXQuaWQ7XG4gIGlmICh4LnRhcmdldC5jbGFzc05hbWUgPT09IFwibm90ZVRpdGxlSDNcIikge1xuICAgIG15Tm90ZXBhZFt0YXJnZXRJRF0udGl0bGUgPSB4LnRhcmdldC5pbm5lclRleHQ7XG4gICAgbGV0IG15Tm90ZXBhZFN0cmluZz0gSlNPTi5zdHJpbmdpZnkobXlOb3RlcGFkKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbm90ZXBhZFN0b3JhZ2UnLCBteU5vdGVwYWRTdHJpbmcpO1xuICB9XG4gIGlmICh4LnRhcmdldC5jbGFzc05hbWUgPT09IFwibm90ZURlc2NyaXB0aW9uRGl2XCIpIHtcbiAgICBteU5vdGVwYWRbdGFyZ2V0SURdLmRlc2NyaXB0aW9uID0geC50YXJnZXQuaW5uZXJUZXh0O1xuICAgIGxldCBteU5vdGVwYWRTdHJpbmc9IEpTT04uc3RyaW5naWZ5KG15Tm90ZXBhZCk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25vdGVwYWRTdG9yYWdlJywgbXlOb3RlcGFkU3RyaW5nKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlTXlOb3RlKHgpIHtcbiAgbGV0IHRhcmdldE5vdGUgPSB4LnRhcmdldC5pZDtcbiAgbXlOb3RlcGFkLnNwbGljZSh0YXJnZXROb3RlLCAxKTtcbiAgZGlzcGxheU15Tm90ZXMoKTtcbiAgbGV0IG15Tm90ZXBhZFN0cmluZz0gSlNPTi5zdHJpbmdpZnkobXlOb3RlcGFkKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ25vdGVwYWRTdG9yYWdlJywgbXlOb3RlcGFkU3RyaW5nKTtcbn1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTm90ZUZvbGRlcigpIHtcbi8vICAgY29uc3QgbmV3Tm90ZUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3Rm9sZGVyQm94XCIpO1xuLy8gICBpZiAobmV3Tm90ZUJveCkge1xuLy8gICAgIHJldHVybjtcbi8vICAgfVxuLy8gICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbi8vICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbi8vICAgZGl2LnNldEF0dHJpYnV0ZShcImlkXCIsIFwibmV3Rm9sZGVyQm94XCIpO1xuLy8gICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbi8vICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJuZXdGb2xkZXJcIik7XG4vLyAgIGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuLy8gICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJhdXRvZm9jdXNcIiwgXCJcIik7XG4vLyAgIGlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIFwiRW50ZXIgRm9sZGVyIE5hbWVcIik7XG4vLyAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4vLyAgIGJ1dHRvbkNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm5ld0ZvbGRlckJ1dHRvbnNcIik7XG4vLyAgIGNvbnN0IGFkZEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4vLyAgIGFkZEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQWRkXCI7XG4vLyAgIGFkZEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImFkZEZvbGRlckJ1dHRvblwiKTtcbi8vICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbi8vICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZGVsZXRlRm9sZGVyQnV0dG9uXCIpO1xuLy8gICBkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIlhcIjtcbi8vICAgLy8gYXBwZW5kIHRoZSBlbGVtZW50cyB0byB0aGUgY29ycmVjdCBwYXJlbnRzXG4vLyAgIGNvbnN0IG5vdGVMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub3RlTGlzdFwiKTtcbi8vICAgbGkuYXBwZW5kQ2hpbGQoZGl2KTtcbi8vICAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcbi8vICAgZGl2LmFwcGVuZENoaWxkKGJ1dHRvbkNvbnRhaW5lcik7XG4vLyAgIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRCdXR0b24pO1xuLy8gICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcbi8vICAgbm90ZUxpc3QuaW5zZXJ0QmVmb3JlKGxpLCBub3RlTGlzdC5jaGlsZHJlbltub3RlTGlzdC5jaGlsZHJlbi5sZW5ndGggLSAxXSk7XG4vLyB9XG4iLCJpbXBvcnQge1xuICBlZGl0RGV0YWlsc1N3aXRjaCxcbiAgb3JnYW5pemVQcm9qZWN0Rm9sZGVyLFxuICB0YXJnZXRUb0RvLFxuICBkaXNwbGF5R2VuZXJhbCxcbiAgZGlzcGxheU15UHJvamVjdCxcbiAgdGVtcGZvbGRlcixcbn0gZnJvbSBcIi4vZGlzcGxheVByb2plY3RzXCI7XG5pbXBvcnQge1xuICBhZGROb3RlLFxuICBidWlsZE5vdGVGb2xkZXIsXG4gIHN1Ym1pdE5vdGUsXG4gIGFkZE5vdGVTd2l0Y2gsXG59IGZyb20gXCIuL2Rpc3BsYXlOb3Rlc1wiO1xuY29uc3QgZm9ybUJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9ybUJveFwiKTtcbmxldCBhZGRQcm9qU3dpdGNoID0gdHJ1ZTtcbmV4cG9ydCB7IGFkZFByb2pTd2l0Y2ggfTtcbi8vUHJvamVjdCBmb3JtIGFwcGVhcnNcbmV4cG9ydCBmdW5jdGlvbiBhZGRQcm9qKCkge1xuICBpZiAoY3VycmVudEZvbGRlck5hbWUgPT09IFwiTm90ZXBhZFwiKSB7XG4gICAgYWRkTm90ZSgpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYWRkUHJvalN3aXRjaCA9PT0gdHJ1ZSkge1xuICAgIGZvcm1Cb3guc3R5bGUudHJhbnNpdGlvbiA9IFwib3BhY2l0eSAuNnMgZWFzZS1pblwiO1xuICAgIGZvcm1Cb3guc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgIGZvcm1Cb3guc3R5bGUub3BhY2l0eSA9IFwiMTAwJVwiO1xuICAgIGZvcm1Cb3guc3R5bGUuekluZGV4ID0gXCIxXCI7XG4gICAgYWRkUHJvalN3aXRjaCA9IGZhbHNlO1xuICAgIGNvbnN0IGZvcm1UaXRsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0VGl0bGVcIik7XG4gICAgZm9ybVRpdGxlSW5wdXQuZm9jdXMoKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JtQm94LnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBmb3JtQm94LnN0eWxlLnpJbmRleCA9IFwiLTFcIjtcbiAgICBhZGRQcm9qU3dpdGNoID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3RUaXRsZVwiKS52YWx1ZSA9IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0RGVzY3JpcHRpb25cIikudmFsdWUgPSBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVlRGF0ZVwiKS52YWx1ZSA9IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmlvcml0eVwiKS5jaGVja2VkID0gZmFsc2U7XG4gIH1cbn1cblxubGV0IG15UHJvamVjdHMgPSBbXTsgLy90aGlzIGFycmF5IHN0b3JlcyBhbGwgb2JqZWN0c1xuZXhwb3J0IHsgbXlQcm9qZWN0cyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gc3VibWl0UHJvamVjdChldmVudCkge1xuICBsZXQgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0VGl0bGVcIikudmFsdWU7XG4gIGxldCBwcm9qZWN0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3REZXNjcmlwdGlvblwiKS52YWx1ZTtcbiAgbGV0IHByb2plY3REdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkdWVEYXRlXCIpLnZhbHVlO1xuICBsZXQgcHJvamVjdFByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmlvcml0eVwiKS5jaGVja2VkO1xuICBpZiAocHJvamVjdFRpdGxlICE9PSBcIlwiKSB7XG4gICAgZnVuY3Rpb24gcHJvamVjdERhdGEoXG4gICAgICBwcm9qZWN0VGl0bGUsXG4gICAgICBwcm9qZWN0RGVzY3JpcHRpb24sXG4gICAgICBwcm9qZWN0RHVlRGF0ZSxcbiAgICAgIHByb2plY3RQcmlvcml0eSxcbiAgICAgIGN1cnJlbnRGb2xkZXJOYW1lLFxuICAgICAgc3RhdHVzXG4gICAgKSB7XG4gICAgICB0aGlzLnRpdGxlID0gcHJvamVjdFRpdGxlO1xuICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHByb2plY3REZXNjcmlwdGlvbjtcbiAgICAgIHRoaXMuZGF0ZSA9IHByb2plY3REdWVEYXRlO1xuICAgICAgdGhpcy5wcmlvcml0eSA9IHByb2plY3RQcmlvcml0eTtcbiAgICAgIHRoaXMuZm9sZGVyID0gY3VycmVudEZvbGRlck5hbWU7XG4gICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZWRpdERldGFpbHNTd2l0Y2ggPT09IGZhbHNlKSB7XG4gICAgICBteVByb2plY3RzLnB1c2goXG4gICAgICAgIG5ldyBwcm9qZWN0RGF0YShcbiAgICAgICAgICBwcm9qZWN0VGl0bGUsXG4gICAgICAgICAgcHJvamVjdERlc2NyaXB0aW9uLFxuICAgICAgICAgIHByb2plY3REdWVEYXRlLFxuICAgICAgICAgIHByb2plY3RQcmlvcml0eSxcbiAgICAgICAgICBjdXJyZW50Rm9sZGVyTmFtZSxcbiAgICAgICAgICBzdGF0dXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBhZGRQcm9qKCk7XG4gICAgICBkaXNwbGF5TXlQcm9qZWN0KCk7XG4gICAgfVxuICAgIC8vIGlmIGVkaXRpbmcgYSB0b0RvJ3MgZGV0YWlsc1xuICAgIGlmIChlZGl0RGV0YWlsc1N3aXRjaCA9PT0gdHJ1ZSkge1xuICAgICAgbXlQcm9qZWN0c1t0YXJnZXRUb0RvXSA9IG5ldyBwcm9qZWN0RGF0YShcbiAgICAgICAgcHJvamVjdFRpdGxlLFxuICAgICAgICBwcm9qZWN0RGVzY3JpcHRpb24sXG4gICAgICAgIHByb2plY3REdWVEYXRlLFxuICAgICAgICBwcm9qZWN0UHJpb3JpdHksXG4gICAgICAgIHRlbXBmb2xkZXJcbiAgICAgICk7XG4gICAgICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50Qm9keVwiKTtcbiAgICAgIGNvbnRlbnQuaW5uZXJUZXh0ID0gXCJcIjtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoY3VycmVudEZvbGRlck5hbWUgPT09IFwiR2VuZXJhbFwiKSB7XG4gICAgICAgIGRpc3BsYXlHZW5lcmFsKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcmdhbml6ZVByb2plY3RGb2xkZXIoKTtcbiAgICAgIH1cbiAgICAgIGVkaXREZXRhaWxzU3dpdGNoID0gZmFsc2U7XG4gICAgICBhZGRQcm9qKCk7XG4gICAgfVxuICAgIC8vYXJyYXkgbG9jYWxTdG9yYWdlIHRlc3RcbiAgICBsZXQgYXJyYXlTdG9yYWdlID0gSlNPTi5zdHJpbmdpZnkobXlQcm9qZWN0cyk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0QXJyYXlcIiwgYXJyYXlTdG9yYWdlKTtcbiAgfVxufVxuY29uc3QgY2FuY2VsUHJvamVjdEFkZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FuY2VsUHJvamVjdFwiKTtcbmNhbmNlbFByb2plY3RBZGQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNhbmNlbFByb2plY3RGb3JtKTtcbmZ1bmN0aW9uIGNhbmNlbFByb2plY3RGb3JtKCkge1xuICBmb3JtQm94LnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgZm9ybUJveC5zdHlsZS56SW5kZXggPSBcIi0xXCI7XG4gIGFkZFByb2pTd2l0Y2ggPSB0cnVlO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3RUaXRsZVwiKS52YWx1ZSA9IFwiXCI7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdERlc2NyaXB0aW9uXCIpLnZhbHVlID0gXCJcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkdWVEYXRlXCIpLnZhbHVlID0gXCJcIjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcmlvcml0eVwiKS5jaGVja2VkID0gZmFsc2U7XG59XG4vLyBjcmVhdGUgbmV3IHByb2plY3QgZm9sZGVycyBmcm9tIHRoZSBzaWRlYmFyXG5leHBvcnQgZnVuY3Rpb24gYnVpbGROZXdGb2xkZXIoKSB7XG4gIGNvbnN0IG5ld0ZvbGRlckJveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3Rm9sZGVyQm94XCIpO1xuICBpZiAobmV3Rm9sZGVyQm94KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vYnVpbGQgbW9kYWwgdG8gbmFtZSBwcm9qZWN0XG4gIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICBsaS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm5ld0ZvbGRlckxJXCIpO1xuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJuZXdGb2xkZXJCb3hcIik7XG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm5ld0ZvbGRlclwiKTtcbiAgaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHRcIik7XG4gIGlucHV0LnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIFwiRW50ZXIgUHJvamVjdCBOYW1lXCIpO1xuICBjb25zdCBidXR0b25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBidXR0b25Db250YWluZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJuZXdGb2xkZXJCdXR0b25zXCIpO1xuICBjb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBhZGRCdXR0b24udGV4dENvbnRlbnQgPSBcIkFkZFwiO1xuICBhZGRCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJhZGRGb2xkZXJCdXR0b25cIik7XG4gIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImRlbGV0ZUZvbGRlckJ1dHRvblwiKTtcbiAgZGVsZXRlQnV0dG9uLnRleHRDb250ZW50ID0gXCJYXCI7XG4gIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2FuY2VsRm9sZGVyKTtcbiAgLy8gYXBwZW5kIHRoZSBlbGVtZW50cyB0byB0aGUgY29ycmVjdCBwYXJlbnRzXG4gIGxpLmFwcGVuZENoaWxkKGRpdik7XG4gIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XG4gIGRpdi5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpO1xuICBidXR0b25Db250YWluZXIuYXBwZW5kQ2hpbGQoYWRkQnV0dG9uKTtcbiAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbik7XG4gIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0TGlzdFwiKTtcbiAgcHJvamVjdExpc3QuaW5zZXJ0QmVmb3JlKFxuICAgIGxpLFxuICAgIHByb2plY3RMaXN0LmNoaWxkcmVuW3Byb2plY3RMaXN0LmNoaWxkcmVuLmxlbmd0aCAtIDFdXG4gICk7XG4gIGlucHV0LmZvY3VzKCk7XG59XG5mdW5jdGlvbiBjYW5jZWxGb2xkZXIoKSB7XG4gIGNvbnN0IG5ld0ZvbGRlckxJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXdGb2xkZXJMSVwiKTtcbiAgbmV3Rm9sZGVyTEkucmVtb3ZlKCk7XG59XG5jb25zdCBmb2xkZXJCdXR0b25Ib2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvbGRlckJ1dHRvbkhvbGRlclwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vRGVsZXRlRm9sZGVyKCkge1xuICBjb25zdCBmb2xkZXJFZGl0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvbGRlckVkaXRvclwiKTtcbiAgZm9sZGVyQnV0dG9uSG9sZGVyLnJlbW92ZUNoaWxkKGZvbGRlckRlc3Ryb3llcik7XG4gIGZvbGRlckJ1dHRvbkhvbGRlci5yZW1vdmVDaGlsZChmb2xkZXJFZGl0b3IpO1xufVxuLy9hZGQgcHJvamVjdCB0byBzaWRlYmFyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tmb3JCdXR0b24oZSkge1xuICBjb25zdCB0YXJnZXRGb2xkZXIgPSBlLnRhcmdldC5jbG9zZXN0KFwiI2FkZEZvbGRlckJ1dHRvblwiKTtcbiAgY29uc3QgbmV3Rm9sZGVySW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5ld0ZvbGRlclwiKTtcbiAgY29uc3QgdGFyZ2V0Q2FuY2VsID0gZS50YXJnZXQuY2xvc2VzdChcIiNkZWxldGVGb2xkZXJCdXR0b25cIik7XG4gIGlmICh0YXJnZXRGb2xkZXIgJiYgbmV3Rm9sZGVySW5wdXQudmFsdWUgIT09IFwiXCIpIHtcbiAgICAvL2J1aWxkIG5ldyBmb2xkZXIgb24gc2lkZWJhclxuICAgIGxldCBwcm9qZWN0TmFtZSA9IG5ld0ZvbGRlcklucHV0LnZhbHVlO1xuICAgIGNvbnN0IGxpRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBjb25zdCBzcGFuRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGNvbnN0IG5ld0ZvbGRlckxJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXdGb2xkZXJMSVwiKTtcbiAgICBzcGFuRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdEZvbGRlclwiKTtcbiAgICAvL2FkZCBsaXN0ZW5lciB0byBjaGFuZ2UgY3VycmVudGZvbGRlciBieSBjbGlja2luZyBzaWRlYmFyIGVsZW1lbnRcbiAgICBzcGFuRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZm9sZGVyTmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3VycmVudEZvbGRlck5hbWVcIik7XG4gICAgICBmb2xkZXJOYW1lLmlubmVyVGV4dCA9IGAke3NwYW5FbGVtZW50LmlubmVyVGV4dH1gO1xuICAgICAgY3VycmVudEZvbGRlck5hbWUgPSBmb2xkZXJOYW1lLmlubmVyVGV4dDtcbiAgICAgIGNvbnN0IGZvbGRlckRlc3Ryb3llciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9sZGVyRGVzdHJveWVyXCIpO1xuICAgICAgaWYgKFxuICAgICAgICBjdXJyZW50Rm9sZGVyTmFtZSAhPT0gXCJHZW5lcmFsXCIgJiZcbiAgICAgICAgY3VycmVudEZvbGRlck5hbWUgIT09IFwiTm90ZXBhZFwiICYmXG4gICAgICAgICFmb2xkZXJEZXN0cm95ZXJcbiAgICAgICkge1xuICAgICAgICBjb25zdCBlZGl0Rm9sZGVyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgZWRpdEZvbGRlckJ1dHRvbi5pbm5lclRleHQgPSBcIkVkaXQgRm9sZGVyXCI7XG4gICAgICAgIGVkaXRGb2xkZXJCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJmb2xkZXJFZGl0b3JcIik7XG4gICAgICAgIGVkaXRGb2xkZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGVkaXRGb2xkZXIpO1xuICAgICAgICBmb2xkZXJCdXR0b25Ib2xkZXIuYXBwZW5kQ2hpbGQoZWRpdEZvbGRlckJ1dHRvbik7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUZvbGRlckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGRlbGV0ZUZvbGRlckJ1dHRvbi5pbm5lclRleHQgPSBcIkRlbGV0ZSBGb2xkZXJcIjtcbiAgICAgICAgZGVsZXRlRm9sZGVyQnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZm9sZGVyRGVzdHJveWVyXCIpO1xuICAgICAgICBkZWxldGVGb2xkZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRlbGV0ZVRoaXNGb2xkZXIpO1xuICAgICAgICBmb2xkZXJCdXR0b25Ib2xkZXIuYXBwZW5kQ2hpbGQoZGVsZXRlRm9sZGVyQnV0dG9uKTtcbiAgICAgIH1cbiAgICAgIG9yZ2FuaXplUHJvamVjdEZvbGRlcigpO1xuICAgIH0pO1xuICAgIHNwYW5FbGVtZW50LnRleHRDb250ZW50ID0gcHJvamVjdE5hbWU7XG4gICAgbGlFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdExpc3RcIik7XG4gICAgbmV3Rm9sZGVyTEkucmVtb3ZlKCk7XG4gICAgcHJvamVjdExpc3QuaW5zZXJ0QmVmb3JlKFxuICAgICAgbGlFbGVtZW50LFxuICAgICAgcHJvamVjdExpc3QuY2hpbGRyZW5bcHJvamVjdExpc3QuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICApO1xuICAgIGFkZEZvbGRlclRvU3RvcmFnZSgpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRGb2xkZXJUb1N0b3JhZ2UoKSB7XG4gIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0TGlzdFwiKTtcbiAgbGV0IHNpZGViYXJBcnJheSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RMaXN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKFxuICAgICAgcHJvamVjdExpc3QuY2hpbGRyZW5baV0udGV4dENvbnRlbnQgIT09IFwiR2VuZXJhbFwiICYmXG4gICAgICBwcm9qZWN0TGlzdC5jaGlsZHJlbltpXS50ZXh0Q29udGVudCAhPT0gXCIrXCJcbiAgICApIHtcbiAgICAgIHNpZGViYXJBcnJheS5wdXNoKHByb2plY3RMaXN0LmNoaWxkcmVuW2ldLnRleHRDb250ZW50KTtcbiAgICB9XG4gIH1cbiAgbGV0IHNpZGViYXJTdHJpbmc9IEpTT04uc3RyaW5naWZ5KHNpZGViYXJBcnJheSlcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NpZGViYXJGb2xkZXJzJywgc2lkZWJhclN0cmluZyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlVGhpc0ZvbGRlcigpIHtcbiAgbGV0IHRlbXBBcnJheSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG15UHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobXlQcm9qZWN0c1tpXS5mb2xkZXIgIT09IGN1cnJlbnRGb2xkZXJOYW1lKSB7XG4gICAgICB0ZW1wQXJyYXkucHVzaChteVByb2plY3RzW2ldKTtcbiAgICB9XG4gIH1cbiAgbXlQcm9qZWN0cyA9IHRlbXBBcnJheTtcbiAgY29uc3QgZm9sZGVyTmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3VycmVudEZvbGRlck5hbWVcIik7XG4gIGxldCBkZWxldGVGb2xkZXJOYW1lID0gY3VycmVudEZvbGRlck5hbWU7XG4gIGZvbGRlck5hbWUuaW5uZXJUZXh0ID0gXCJHZW5lcmFsXCI7XG4gIGN1cnJlbnRGb2xkZXJOYW1lID0gXCJHZW5lcmFsXCI7XG4gIG5vRGVsZXRlRm9sZGVyKCk7XG4gIGRpc3BsYXlHZW5lcmFsKCk7XG4gIC8vcmVtb3ZlIGZvbGRlciBmcm9tIGxpc3QgbWVudVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RMaXN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHByb2plY3RMaXN0LmNoaWxkcmVuW2ldLmlubmVyVGV4dCA9PT0gZGVsZXRlRm9sZGVyTmFtZSkge1xuICAgICAgcHJvamVjdExpc3QuY2hpbGRyZW5baV0ucmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gIGFkZEZvbGRlclRvU3RvcmFnZSgpO1xuICBsZXQgYXJyYXlTdG9yYWdlID0gSlNPTi5zdHJpbmdpZnkobXlQcm9qZWN0cyk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdEFycmF5XCIsIGFycmF5U3RvcmFnZSk7XG59XG5jb25zdCBmb2xkZXJGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0Rm9sZGVyRm9ybVwiKTtcbmV4cG9ydCBmdW5jdGlvbiBlZGl0Rm9sZGVyKCkge1xuICBmb2xkZXJGb3JtLnN0eWxlLnRyYW5zaXRpb24gPSBcIm9wYWNpdHkgLjZzIGVhc2UtaW5cIjtcbiAgZm9sZGVyRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gIGZvbGRlckZvcm0uc3R5bGUub3BhY2l0eSA9IFwiMTAwJVwiO1xuICBmb2xkZXJGb3JtLnN0eWxlLnpJbmRleCA9IFwiMVwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbEVkaXRGb2xkZXIoKSB7XG4gIGZvbGRlckZvcm0uc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuICBmb2xkZXJGb3JtLnN0eWxlLnpJbmRleCA9IFwiLTFcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdWJtaXROZXdGb2xkZXJOYW1lKCkge1xuICBjb25zdCBlZGl0Rm9sZGVySW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXRGb2xkZXJJbnB1dFwiKTtcbiAgbGV0IG5ld0ZvbGRlck5hbWUgPSBlZGl0Rm9sZGVySW5wdXQudmFsdWU7XG4gIGlmIChuZXdGb2xkZXJOYW1lICE9PSBcIlwiKSB7XG4gICAgZm9sZGVyRm9ybS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgZm9sZGVyRm9ybS5zdHlsZS56SW5kZXggPSBcIi0xXCI7XG4gICAgZWRpdEZvbGRlcklucHV0LnZhbHVlID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG15UHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChteVByb2plY3RzW2ldLmZvbGRlciA9PT0gY3VycmVudEZvbGRlck5hbWUpIHtcbiAgICAgICAgbXlQcm9qZWN0c1tpXS5mb2xkZXIgPSBuZXdGb2xkZXJOYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBmb2xkZXJOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjdXJyZW50Rm9sZGVyTmFtZVwiKTtcbiAgICBmb2xkZXJOYW1lLmlubmVyVGV4dCA9IG5ld0ZvbGRlck5hbWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0TGlzdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByb2plY3RMaXN0LmNoaWxkcmVuW2ldLmlubmVyVGV4dCA9PT0gY3VycmVudEZvbGRlck5hbWUpIHtcbiAgICAgICAgY29uc3Qgc2lkZWJhckxpbmsgPSBwcm9qZWN0TGlzdC5jaGlsZHJlbltpXTtcbiAgICAgICAgY29uc3Qgc2lkZWJhckxpbmtTcGFuID0gc2lkZWJhckxpbmsuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpO1xuICAgICAgICBzaWRlYmFyTGlua1NwYW5bMF0uaW5uZXJUZXh0ID0gbmV3Rm9sZGVyTmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3VycmVudEZvbGRlck5hbWUgPSBuZXdGb2xkZXJOYW1lO1xuICB9XG4gIGxldCBhcnJheVN0b3JhZ2UgPSBKU09OLnN0cmluZ2lmeShteVByb2plY3RzKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0QXJyYXlcIiwgYXJyYXlTdG9yYWdlKTtcbiAgYWRkRm9sZGVyVG9TdG9yYWdlKCk7XG59XG5sZXQgY3VycmVudEZvbGRlck5hbWUgPSBcIkdlbmVyYWxcIjsgLy90aGlzIHZhcmlhYmxlIGlzIHdoYXQgaW1wcmludHMgb24gb2JqZWN0c1xuZXhwb3J0IHsgY3VycmVudEZvbGRlck5hbWUgfTtcbiIsImltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuaW1wb3J0IHtcbiAgYWRkUHJvaixcbiAgc3VibWl0UHJvamVjdCxcbiAgYnVpbGROZXdGb2xkZXIsXG4gIGNoZWNrZm9yQnV0dG9uLFxuICBjdXJyZW50Rm9sZGVyTmFtZSxcbiAgbm9EZWxldGVGb2xkZXIsXG4gIGNhbmNlbEVkaXRGb2xkZXIsXG4gIHN1Ym1pdE5ld0ZvbGRlck5hbWUsXG4gIG15UHJvamVjdHMsXG4gIGVkaXRGb2xkZXIsXG4gIGRlbGV0ZVRoaXNGb2xkZXJcbn0gZnJvbSBcIi4vYWRkUHJvamVjdFwiO1xuaW1wb3J0IHtcbiAgZGlzcGxheU15UHJvamVjdCxcbiAgb3JnYW5pemVQcm9qZWN0Rm9sZGVyLFxuICBkaXNwbGF5R2VuZXJhbCxcbn0gZnJvbSBcIi4vZGlzcGxheVByb2plY3RzXCI7XG5pbXBvcnQgeyBjYW5jZWxOb3RlRm9ybSwgc3VibWl0Tm90ZSwgZGlzcGxheU15Tm90ZXMsIG15Tm90ZXBhZCB9IGZyb20gXCIuL2Rpc3BsYXlOb3Rlc1wiO1xuXG5jb25zdCBhZGRQcm9qZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRQcm9qZWN0QnV0dG9uXCIpO1xuY29uc3Qgc3VibWl0UHJvamVjdEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3VibWl0UHJvamVjdFwiKTtcbmNvbnN0IHN1Ym1pdE5vdGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1Ym1pdE5vdGVcIik7XG5jb25zdCBuZXdUb0RvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRUb0RvSXRlbVwiKTtcbmNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9qZWN0Rm9sZGVyXCIpO1xuY29uc3QgZm9sZGVyTmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3VycmVudEZvbGRlck5hbWVcIik7XG5jb25zdCBjYW5jZWxOb3RlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW5jZWxOb3RlXCIpO1xuY29uc3Qgbm90ZXBhZEZvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90ZXBhZEZvbGRlclwiKTtcbmNvbnN0IGNhbmNlbEZvbGRlckJ1dHRvbj0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW5jZWxGb2xkZXJOYW1lXCIpO1xuY29uc3Qgc3VibWl0Rm9sZGVyTmFtZT0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJtaXRGb2xkZXJOYW1lXCIpO1xuXG5ub3RlcGFkRm9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkaXNwbGF5TXlOb3Rlcyk7XG5ub3RlcGFkRm9sZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGNvbnN0IGZvbGRlckRlc3Ryb3llciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9sZGVyRGVzdHJveWVyXCIpO1xuICBpZiAoZm9sZGVyRGVzdHJveWVyKSB7XG4gICAgbm9EZWxldGVGb2xkZXIoKTtcbiAgfVxufSk7XG5zdWJtaXRGb2xkZXJOYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzdWJtaXROZXdGb2xkZXJOYW1lKTtcbmNhbmNlbE5vdGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNhbmNlbE5vdGVGb3JtKTtcbmNhbmNlbEZvbGRlckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2FuY2VsRWRpdEZvbGRlcik7XG5hZGRQcm9qZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBidWlsZE5ld0ZvbGRlcik7XG5uZXdUb0RvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhZGRQcm9qKTtcbnN1Ym1pdE5vdGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHN1Ym1pdE5vdGUpO1xuc3VibWl0UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc3VibWl0UHJvamVjdCk7XG4vL3N1Ym1pdFByb2plY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRpc3BsYXlNeVByb2plY3QpO1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNoZWNrZm9yQnV0dG9uKTtcbnByb2plY3RMaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgaXRlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIGZvbGRlck5hbWUuaW5uZXJUZXh0ID0gYCR7aXRlbS5pbm5lckhUTUx9YDtcbiAgICBjdXJyZW50Rm9sZGVyTmFtZSA9IGZvbGRlck5hbWUuaW5uZXJUZXh0O1xuICAgIGlmIChpdGVtLmlkICE9PSBcImdlbmVyYWxGb2xkZXJcIikge1xuICAgICAgb3JnYW5pemVQcm9qZWN0Rm9sZGVyKCk7XG4gICAgfVxuICAgIGlmIChpdGVtLmlkID09PSBcImdlbmVyYWxGb2xkZXJcIikge1xuICAgICAgZGlzcGxheUdlbmVyYWwoKTtcbiAgICAgIGNvbnN0IGZvbGRlckRlc3Ryb3llciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9sZGVyRGVzdHJveWVyXCIpO1xuICAgICAgaWYgKGZvbGRlckRlc3Ryb3llcikge1xuICAgICAgICBub0RlbGV0ZUZvbGRlcigpO1xuICAgICAgfVxuICAgIH1cbiAgICAvL2N1cnJlbnRGb2xkZXJOYW1lIHNob3VsZCBpdCBiZSBlZGl0YWJsZT8gc2hvdWxkIGl0IGJlIGRlbGV0YWJsZT9cbiAgfSk7XG59KTtcblxuY29uc3Qgc3RvcmVkQXJyYXlTdHJpbmc9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0QXJyYXknKTtcbmlmKHN0b3JlZEFycmF5U3RyaW5nKXtcbiAgbGV0IHN0b3JlZEFycmF5PSBKU09OLnBhcnNlKHN0b3JlZEFycmF5U3RyaW5nKTtcbiAgbXlQcm9qZWN0cz1zdG9yZWRBcnJheTtcbiAgZGlzcGxheUdlbmVyYWwoKTtcbn1cbmNvbnN0IHN0b3JlZFNpZGViYXJTdHJpbmc9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaWRlYmFyRm9sZGVycycpO1xuY29uc3QgZm9sZGVyQnV0dG9uSG9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb2xkZXJCdXR0b25Ib2xkZXJcIik7XG5cbmlmKHN0b3JlZFNpZGViYXJTdHJpbmcpe1xuICBsZXQgcHJvamVjdExpc3Q9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0TGlzdCcpO1xuICBjb25zdCBzaWRlYmFyQXJyYXk9IEpTT04ucGFyc2Uoc3RvcmVkU2lkZWJhclN0cmluZyk7XG5cbiAgZm9yKGxldCBpPTA7IGk8c2lkZWJhckFycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICBjb25zdCBsaUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgY29uc3Qgc3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBzcGFuRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdEZvbGRlclwiKTtcbiAgICBzcGFuRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZm9sZGVyTmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY3VycmVudEZvbGRlck5hbWVcIik7XG4gICAgICBmb2xkZXJOYW1lLmlubmVyVGV4dCA9IGAke3NwYW5FbGVtZW50LmlubmVyVGV4dH1gO1xuICAgICAgY3VycmVudEZvbGRlck5hbWUgPSBmb2xkZXJOYW1lLmlubmVyVGV4dDtcbiAgICAgIGNvbnN0IGZvbGRlckRlc3Ryb3llciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9sZGVyRGVzdHJveWVyXCIpO1xuICAgICAgaWYgKFxuICAgICAgICBjdXJyZW50Rm9sZGVyTmFtZSAhPT0gXCJHZW5lcmFsXCIgJiZcbiAgICAgICAgY3VycmVudEZvbGRlck5hbWUgIT09IFwiTm90ZXBhZFwiICYmXG4gICAgICAgICFmb2xkZXJEZXN0cm95ZXJcbiAgICAgICkge1xuICAgICAgICBjb25zdCBlZGl0Rm9sZGVyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgZWRpdEZvbGRlckJ1dHRvbi5pbm5lclRleHQgPSBcIkVkaXQgRm9sZGVyXCI7XG4gICAgICAgIGVkaXRGb2xkZXJCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJmb2xkZXJFZGl0b3JcIik7XG4gICAgICAgIGVkaXRGb2xkZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGVkaXRGb2xkZXIpO1xuICAgICAgICBmb2xkZXJCdXR0b25Ib2xkZXIuYXBwZW5kQ2hpbGQoZWRpdEZvbGRlckJ1dHRvbik7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUZvbGRlckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGRlbGV0ZUZvbGRlckJ1dHRvbi5pbm5lclRleHQgPSBcIkRlbGV0ZSBGb2xkZXJcIjtcbiAgICAgICAgZGVsZXRlRm9sZGVyQnV0dG9uLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiZm9sZGVyRGVzdHJveWVyXCIpO1xuICAgICAgICBkZWxldGVGb2xkZXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRlbGV0ZVRoaXNGb2xkZXIpO1xuICAgICAgICBmb2xkZXJCdXR0b25Ib2xkZXIuYXBwZW5kQ2hpbGQoZGVsZXRlRm9sZGVyQnV0dG9uKTtcbiAgICAgIH1cbiAgICAgIG9yZ2FuaXplUHJvamVjdEZvbGRlcigpO1xuICAgIH0pO1xuXG4gICAgc3BhbkVsZW1lbnQudGV4dENvbnRlbnQgPSBzaWRlYmFyQXJyYXlbaV07XG4gICAgbGlFbGVtZW50LmFwcGVuZENoaWxkKHNwYW5FbGVtZW50KTtcbiAgICAgcHJvamVjdExpc3QuaW5zZXJ0QmVmb3JlKFxuICAgICAgIGxpRWxlbWVudCxcbiAgICAgICBwcm9qZWN0TGlzdC5jaGlsZHJlbltwcm9qZWN0TGlzdC5jaGlsZHJlbi5sZW5ndGggLSAxXVxuICAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0b3JlZE5vdGVwYWRTdHJpbmc9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdub3RlcGFkU3RvcmFnZScpO1xuaWYgKHN0b3JlZE5vdGVwYWRTdHJpbmcpe1xuICBsZXQgc3RvcmVkTm90ZXBhZEFycmF5PSBKU09OLnBhcnNlKHN0b3JlZE5vdGVwYWRTdHJpbmcpO1xuICBteU5vdGVwYWQ9IHN0b3JlZE5vdGVwYWRBcnJheTtcbn0iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiVHlwZUVycm9yIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmd1bWVudHMiLCJhcmdTdHIiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RhY2siLCJOYU4iLCJjb21wYXJlQXNjIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnQiLCJkYXRlUmlnaHQiLCJkaWZmIiwiZGlmZmVyZW5jZUluTW9udGhzIiwic2lnbiIsImRpZmZlcmVuY2UiLCJNYXRoIiwiYWJzIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIiwiZ2V0RGF0ZSIsInNldERhdGUiLCJzZXRNb250aCIsImlzTGFzdE1vbnRoTm90RnVsbCIsImRpcnR5RGF0ZSIsImRhdGUiLCJzZXRIb3VycyIsImVuZE9mRGF5IiwibW9udGgiLCJzZXRGdWxsWWVhciIsImVuZE9mTW9udGgiLCJpc0xhc3REYXlPZk1vbnRoIiwiTnVtYmVyIiwicm91bmRpbmdNYXAiLCJjZWlsIiwicm91bmQiLCJmbG9vciIsInRydW5jIiwidmFsdWUiLCJkZWZhdWx0Um91bmRpbmdNZXRob2QiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwib3JkaW5hbE51bWJlciIsImRpcnR5TnVtYmVyIiwiX29wdGlvbnMiLCJudW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwiZGF5IiwiZGF5UGVyaW9kIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5IiwicHJlZGljYXRlIiwidGVzdCIsImZpbmRJbmRleCIsIm9iamVjdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuIiwidG9rZW5WYWx1ZSIsInJlcGxhY2UiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0TG9uZyIsImZvcm1hdFJlbGF0aXZlIiwiX2RhdGUiLCJfYmFzZURhdGUiLCJsb2NhbGl6ZSIsIndlZWtTdGFydHNPbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsInByb3BlcnR5IiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic2V0VVRDRnVsbFllYXIiLCJNSU5VVEVTX0lOX0RBWSIsIk1JTlVURVNfSU5fQUxNT1NUX1RXT19EQVlTIiwiTUlOVVRFU19JTl9NT05USCIsIk1JTlVURVNfSU5fVFdPX01PTlRIUyIsImRpcnR5QmFzZURhdGUiLCJfcmVmIiwiX29wdGlvbnMkbG9jYWxlIiwibG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsIlJhbmdlRXJyb3IiLCJpc05hTiIsImxvY2FsaXplT3B0aW9ucyIsIkJvb2xlYW4iLCJtb250aHMiLCJzZWNvbmRzIiwibWV0aG9kIiwiZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIiwicm91bmRpbmdNZXRob2QiLCJkaWZmZXJlbmNlSW5TZWNvbmRzIiwib2Zmc2V0SW5TZWNvbmRzIiwibWludXRlcyIsImluY2x1ZGVTZWNvbmRzIiwiaG91cnMiLCJkYXlzIiwibmVhcmVzdE1vbnRoIiwibW9udGhzU2luY2VTdGFydE9mWWVhciIsInllYXJzIiwiZm9ybWF0RGlzdGFuY2VUb05vdyIsIm5vdyIsInRvSW50ZWdlciIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDRGF5Iiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDV2VlayIsIl9yZWYyIiwiX3JlZjMiLCJfb3B0aW9ucyR3ZWVrU3RhcnRzT24iLCJfb3B0aW9ucyRsb2NhbGUkb3B0aW8iLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwyIiwiZ2V0VVRDV2Vla1llYXIiLCJfb3B0aW9ucyRmaXJzdFdlZWtDb24iLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsIm91dHB1dCIsInNpZ25lZFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIkciLCJ5IiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJmaXJzdFdlZWsiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJmb3VydGhPZkphbnVhcnkiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInRpbWVzdGFtcCIsInNldFVUQ01vbnRoIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImRheVBlcmlvZEVudW1WYWx1ZSIsInRvTG93ZXJDYXNlIiwiYiIsIkIiLCJoIiwiSCIsIksiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIngiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsIm9mZnNldCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwiZGVsaW1pdGVyIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJwYXR0ZXJuIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsIl9yZWY0IiwiX29wdGlvbnMkbG9jYWxlMiIsIl9vcHRpb25zJGxvY2FsZTIkb3B0aSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9vcHRpb25zJGxvY2FsZTMiLCJfb3B0aW9ucyRsb2NhbGUzJG9wdGkiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwzIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsNCIsImZvcm1hdFN0ciIsImlzRGF0ZSIsImlzVmFsaWQiLCJkaXJ0eUFtb3VudCIsImFtb3VudCIsImFkZE1pbGxpc2Vjb25kcyIsInN1Yk1pbGxpc2Vjb25kcyIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJtYXRjaGVkIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaW5kZXhPZiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwic3RyaWtlVGV4dCIsImV2ZW50IiwiY2hlY2tlZFRvRG8iLCJnZXRFbGVtZW50QnlJZCIsInRvRG9UaXRsZVRleHQiLCJ0ZXh0Q29udGVudCIsIm15UHJvamVjdHMiLCJzdGF0dXMiLCJib3JkZXIiLCJpbm5lckhUTUwiLCJhcnJheVN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwib3JnYW5pemVQcm9qZWN0Rm9sZGVyIiwiaW5uZXJUZXh0IiwiZm9sZGVyIiwiY3VycmVudEZvbGRlck5hbWUiLCJkaXNwbGF5IiwidG9Eb1Byb2oiLCJjbGFzc0xpc3QiLCJhZGQiLCJsZWZ0c2lkZVByb2oiLCJwcm9qQ29tcGxldGUiLCJ0eXBlIiwiY2hlY2tlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwcm9qVGl0bGUiLCJ0aXRsZSIsInJpZ2h0c2lkZVByb2oiLCJwcm9qZWN0RGV0YWlscyIsInNob3dEZXRhaWxzIiwicHJvakR1ZURhdGUiLCJmb3JtYXREYXRlIiwiY2FuY2VsUHJvaiIsImNhbmNlbFRvRG8iLCJwcmlvcml0eSIsImNvbG9yIiwiZGlzcGxheUdlbmVyYWwiLCJ0YXJnZXRUb0RvIiwiZGV0YWlsc1N3aXRjaCIsImRldGFpbHMiLCJtb2RhbERldGFpbHMiLCJ0cmFuc2l0aW9uIiwib3BhY2l0eSIsInpJbmRleCIsImRlc2NyaXB0aW9uIiwiY2FuY2VsTW9kYWxEZWV0cyIsImVkaXRNb2RhbERldGFpbHMiLCJlZGl0RGV0YWlsc1N3aXRjaCIsInRlbXBmb2xkZXIiLCJhZGROb3RlU3dpdGNoIiwibm90ZUJveCIsImFkZE5vdGUiLCJhZGRQcm9qU3dpdGNoIiwiYWRkUHJvaiIsImZvY3VzIiwibXlOb3RlcGFkIiwiZGlzcGxheU15Tm90ZXMiLCJmb2xkZXJOYW1lIiwidG9Eb05vdGUiLCJwb3NpdGlvbiIsImJhY2tncm91bmRDb2xvciIsIm5vdGVUaXRsZSIsImNsYXNzTmFtZSIsImNvbnRlbnRFZGl0YWJsZSIsInNwZWxsY2hlY2siLCJlZGl0Tm90ZURldGFpbHMiLCJub3RlRGVzY3JpcHRpb24iLCJyZW1vdmVOb3RlIiwiYm90dG9tIiwicmVtb3ZlTXlOb3RlIiwidGFyZ2V0SUQiLCJteU5vdGVwYWRTdHJpbmciLCJ0YXJnZXROb3RlIiwiZm9ybUJveCIsImNhbmNlbEZvbGRlciIsImZvbGRlckJ1dHRvbkhvbGRlciIsIm5vRGVsZXRlRm9sZGVyIiwiZm9sZGVyRWRpdG9yIiwiZm9sZGVyRGVzdHJveWVyIiwiYWRkRm9sZGVyVG9TdG9yYWdlIiwicHJvamVjdExpc3QiLCJzaWRlYmFyQXJyYXkiLCJjaGlsZHJlbiIsInNpZGViYXJTdHJpbmciLCJkZWxldGVUaGlzRm9sZGVyIiwidGVtcEFycmF5IiwiZGVsZXRlRm9sZGVyTmFtZSIsImZvbGRlckZvcm0iLCJlZGl0Rm9sZGVyIiwiYWRkUHJvamVjdCIsInN1Ym1pdFByb2plY3RCdXR0b24iLCJzdWJtaXROb3RlQnV0dG9uIiwibmV3VG9EbyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjYW5jZWxOb3RlQnV0dG9uIiwibm90ZXBhZEZvbGRlciIsImNhbmNlbEZvbGRlckJ1dHRvbiIsInN1Ym1pdEZvbGRlck5hbWUiLCJlZGl0Rm9sZGVySW5wdXQiLCJuZXdGb2xkZXJOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsaSIsImRpdiIsImJ1dHRvbkNvbnRhaW5lciIsImFkZEJ1dHRvbiIsImRlbGV0ZUJ1dHRvbiIsImluc2VydEJlZm9yZSIsImNvbG9yU2VsZWN0VmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsInByb2plY3RUaXRsZSIsInByb2plY3REZXNjcmlwdGlvbiIsInByb2plY3REdWVEYXRlIiwicHJvamVjdFByaW9yaXR5IiwicHJvamVjdERhdGEiLCJkaXNwbGF5TXlQcm9qZWN0IiwidGFyZ2V0Rm9sZGVyIiwiY2xvc2VzdCIsIm5ld0ZvbGRlcklucHV0IiwicHJvamVjdE5hbWUiLCJsaUVsZW1lbnQiLCJzcGFuRWxlbWVudCIsIm5ld0ZvbGRlckxJIiwiZWRpdEZvbGRlckJ1dHRvbiIsImRlbGV0ZUZvbGRlckJ1dHRvbiIsImZvckVhY2giLCJzdG9yZWRBcnJheVN0cmluZyIsImdldEl0ZW0iLCJzdG9yZWRBcnJheSIsInBhcnNlIiwic3RvcmVkU2lkZWJhclN0cmluZyIsInN0b3JlZE5vdGVwYWRTdHJpbmciLCJzdG9yZWROb3RlcGFkQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9